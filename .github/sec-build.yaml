- Target: nmaguiar/secutils:build (alpine 3.23.0_alpha20250612)
  Class: os-pkgs
  Type: alpine
  Vulnerabilities:
  - VulnerabilityID: CVE-2025-32462
    PkgID: sudo@1.9.17-r0
    PkgName: sudo
    PkgIdentifier:
      PURL: pkg:apk/alpine/sudo@1.9.17-r0?arch=x86_64&distro=3.23.0_alpha20250612
      UID: f452168152faeaa2
    InstalledVersion: 1.9.17-r0
    FixedVersion: 1.9.17_p1-r0
    Status: fixed
    Layer:
      Digest: sha256:cc460b0ea5a2ccb4619d0a36b262eefa46989364cd09251c2eff201438c2e187
      DiffID: sha256:56550e2e223133013dae7e98693b65792714e75abb91e59fae058b8e1e54a03c
    PrimaryURL: https://avd.aquasec.com/nvd/cve-2025-32462
    DataSource:
      ID: alpine
      Name: Alpine Secdb
      URL: https://secdb.alpinelinux.org/
    Title: 'sudo: LPE via host option'
    Description: Sudo before 1.9.17p1, when used with a sudoers file that specifies a host that is neither the current host nor ALL, allows listed users to execute commands on unintended machines.
    Severity: HIGH
    CweIDs:
    - CWE-863
    VendorSeverity:
      oracle-oval: 3
      redhat: 3
      ubuntu: 3
    CVSS:
      redhat:
        V3Vector: CVSS:3.1/AV:L/AC:H/PR:L/UI:N/S:U/C:H/I:H/A:H
        V3Score: 7
    References:
    - https://access.redhat.com/security/cve/CVE-2025-32462
    - https://linux.oracle.com/cve/CVE-2025-32462.html
    - https://linux.oracle.com/errata/ELSA-2025-9978.html
    - https://nvd.nist.gov/vuln/detail/CVE-2025-32462
    - https://ubuntu.com/security/notices/USN-7604-1
    - https://ubuntu.com/security/notices/USN-7604-2
    - https://www.cve.org/CVERecord?id=CVE-2025-32462
    - https://www.openwall.com/lists/oss-security/2025/06/30/2
    - https://www.stratascale.com/vulnerability-alert-CVE-2025-32462-sudo-host
    - https://www.sudo.ws/releases/changelog/
    - https://www.sudo.ws/security/advisories/
    - https://www.sudo.ws/security/advisories/host_any/
    PublishedDate: '2025-06-30T21:15:30.08Z'
    LastModifiedDate: '2025-06-30T21:15:30.08Z'
  - VulnerabilityID: CVE-2025-32463
    PkgID: sudo@1.9.17-r0
    PkgName: sudo
    PkgIdentifier:
      PURL: pkg:apk/alpine/sudo@1.9.17-r0?arch=x86_64&distro=3.23.0_alpha20250612
      UID: f452168152faeaa2
    InstalledVersion: 1.9.17-r0
    FixedVersion: 1.9.17_p1-r0
    Status: fixed
    Layer:
      Digest: sha256:cc460b0ea5a2ccb4619d0a36b262eefa46989364cd09251c2eff201438c2e187
      DiffID: sha256:56550e2e223133013dae7e98693b65792714e75abb91e59fae058b8e1e54a03c
    PrimaryURL: https://avd.aquasec.com/nvd/cve-2025-32463
    DataSource:
      ID: alpine
      Name: Alpine Secdb
      URL: https://secdb.alpinelinux.org/
    Title: 'sudo: LPE via chroot option'
    Description: Sudo before 1.9.17p1 allows local users to obtain root access because /etc/nsswitch.conf from a user-controlled directory is used with the --chroot option.
    Severity: HIGH
    CweIDs:
    - CWE-829
    VendorSeverity:
      redhat: 3
      ubuntu: 3
    CVSS:
      redhat:
        V3Vector: CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H
        V3Score: 7.8
    References:
    - https://access.redhat.com/security/cve/CVE-2025-32463
    - https://nvd.nist.gov/vuln/detail/CVE-2025-32463
    - https://ubuntu.com/security/notices/USN-7604-1
    - https://www.cve.org/CVERecord?id=CVE-2025-32463
    - https://www.openwall.com/lists/oss-security/2025/06/30/3
    - https://www.stratascale.com/vulnerability-alert-CVE-2025-32463-sudo-chroot
    - https://www.sudo.ws/releases/changelog/
    - https://www.sudo.ws/security/advisories/
    - https://www.sudo.ws/security/advisories/chroot_bug/
    PublishedDate: '2025-06-30T21:15:30.257Z'
    LastModifiedDate: '2025-06-30T21:15:30.257Z'
- Target: Java
  Class: lang-pkgs
  Type: jar
  Vulnerabilities:
  - VulnerabilityID: CVE-2024-12798
    PkgName: ch.qos.logback:logback-core
    PkgPath: opt/dependency-check/lib/logback-core-1.2.13.jar
    PkgIdentifier:
      PURL: pkg:maven/ch.qos.logback/logback-core@1.2.13
      UID: 75945d17fdbc7707
    InstalledVersion: 1.2.13
    FixedVersion: 1.5.13, 1.3.15
    Status: fixed
    Layer:
      Digest: sha256:cc460b0ea5a2ccb4619d0a36b262eefa46989364cd09251c2eff201438c2e187
      DiffID: sha256:56550e2e223133013dae7e98693b65792714e75abb91e59fae058b8e1e54a03c
    SeveritySource: ghsa
    PrimaryURL: https://avd.aquasec.com/nvd/cve-2024-12798
    DataSource:
      ID: ghsa
      Name: GitHub Security Advisory Maven
      URL: https://github.com/advisories?query=type%3Areviewed+ecosystem%3Amaven
    Title: 'logback-core: arbitrary code execution via JaninoEventEvaluator'
    Description: "ACE vulnerability in JaninoEventEvaluator  by QOS.CH logback-core\n      upto including version 0.1 to 1.3.14 and\_1.4.0 to 1.5.12 in Java applications allows\n      attacker to execute arbitrary code by compromising an existing\n      logback configuration file or by injecting an environment variable\n      before program execution.\n\n\n\n\n\nMalicious logback configuration files can allow the attacker to execute \narbitrary code using the JaninoEventEvaluator extension.\n\n\n\nA successful attack requires the user to have write access to a \nconfiguration file. Alternatively, the attacker could inject a malicious \nenvironment variable pointing to a malicious configuration file. In both \ncases, the attack requires existing privilege."
    Severity: MEDIUM
    CweIDs:
    - CWE-917
    VendorSeverity:
      ghsa: 2
      redhat: 2
    CVSS:
      redhat:
        V3Vector: CVSS:3.1/AV:L/AC:H/PR:L/UI:R/S:U/C:L/I:H/A:L
        V3Score: 5.5
    References:
    - https://access.redhat.com/security/cve/CVE-2024-12798
    - https://github.com/qos-ch/logback
    - https://github.com/qos-ch/logback/commit/2cb6d520df7592ef1c3a198f1b5df3c10c93e183
    - https://logback.qos.ch/news.html#1.3.15
    - https://logback.qos.ch/news.html#1.5.13
    - https://nvd.nist.gov/vuln/detail/CVE-2024-12798
    - https://www.cve.org/CVERecord?id=CVE-2024-12798
    PublishedDate: '2024-12-19T16:15:07.557Z'
    LastModifiedDate: '2025-01-03T14:15:24.37Z'
  - VulnerabilityID: CVE-2024-12801
    PkgName: ch.qos.logback:logback-core
    PkgPath: opt/dependency-check/lib/logback-core-1.2.13.jar
    PkgIdentifier:
      PURL: pkg:maven/ch.qos.logback/logback-core@1.2.13
      UID: 75945d17fdbc7707
    InstalledVersion: 1.2.13
    FixedVersion: 1.5.13, 1.3.15
    Status: fixed
    Layer:
      Digest: sha256:cc460b0ea5a2ccb4619d0a36b262eefa46989364cd09251c2eff201438c2e187
      DiffID: sha256:56550e2e223133013dae7e98693b65792714e75abb91e59fae058b8e1e54a03c
    SeveritySource: ghsa
    PrimaryURL: https://avd.aquasec.com/nvd/cve-2024-12801
    DataSource:
      ID: ghsa
      Name: GitHub Security Advisory Maven
      URL: https://github.com/advisories?query=type%3Areviewed+ecosystem%3Amaven
    Title: 'logback-core: SaxEventRecorder vulnerable to Server-Side Request Forgery (SSRF) attacks'
    Description: "Server-Side Request Forgery (SSRF) in SaxEventRecorder by QOS.CH logback version 0.1 to 1.3.14 and 1.4.0 to 1.5.12\_ on the Java platform, allows an attacker to \nforge requests by compromising logback configuration files in XML.\n\n\n\nThe attacks involves the modification of DOCTYPE declaration in\_ XML configuration files."
    Severity: LOW
    CweIDs:
    - CWE-918
    VendorSeverity:
      ghsa: 1
      redhat: 1
    CVSS:
      redhat:
        V3Vector: CVSS:3.1/AV:L/AC:H/PR:L/UI:R/S:U/C:L/I:L/A:N
        V3Score: 3.3
    References:
    - https://access.redhat.com/security/cve/CVE-2024-12801
    - https://github.com/qos-ch/logback
    - https://github.com/qos-ch/logback/commit/5f05041cba4c4ac0a62748c5c527a2da48999f2d
    - https://logback.qos.ch/news.html#1.3.15
    - https://logback.qos.ch/news.html#1.5.13
    - https://nvd.nist.gov/vuln/detail/CVE-2024-12801
    - https://www.cve.org/CVERecord?id=CVE-2024-12801
    PublishedDate: '2024-12-19T17:15:08.93Z'
    LastModifiedDate: '2025-01-03T14:15:24.5Z'
  - VulnerabilityID: CVE-2025-48734
    PkgName: commons-beanutils:commons-beanutils
    PkgPath: opt/dependency-check/lib/commons-beanutils-1.9.4.jar
    PkgIdentifier:
      PURL: pkg:maven/commons-beanutils/commons-beanutils@1.9.4
      UID: 87543632af4cfff7
    InstalledVersion: 1.9.4
    FixedVersion: 1.11.0
    Status: fixed
    Layer:
      Digest: sha256:cc460b0ea5a2ccb4619d0a36b262eefa46989364cd09251c2eff201438c2e187
      DiffID: sha256:56550e2e223133013dae7e98693b65792714e75abb91e59fae058b8e1e54a03c
    SeveritySource: ghsa
    PrimaryURL: https://avd.aquasec.com/nvd/cve-2025-48734
    DataSource:
      ID: ghsa
      Name: GitHub Security Advisory Maven
      URL: https://github.com/advisories?query=type%3Areviewed+ecosystem%3Amaven
    Title: 'commons-beanutils: Apache Commons BeanUtils: PropertyUtilsBean does not suppresses an enum''s declaredClass property by default'
    Description: |-
      Improper Access Control vulnerability in Apache Commons.



      A special BeanIntrospector class was added in version 1.9.2. This can be used to stop attackers from using the declared class property of Java enum objects to get access to the classloader. However this protection was not enabled by default. PropertyUtilsBean (and consequently BeanUtilsBean) now disallows declared class level property access by default.





      Releases 1.11.0 and 2.0.0-M2 address a potential security issue when accessing enum properties in an uncontrolled way. If an application using Commons BeanUtils passes property paths from an external source directly to the getProperty() method of PropertyUtilsBean, an attacker can access the enum’s class loader via the “declaredClass” property available on all Java “enum” objects. Accessing the enum’s “declaredClass” allows remote attackers to access the ClassLoader and execute arbitrary code. The same issue exists with PropertyUtilsBean.getNestedProperty().
      Starting in versions 1.11.0 and 2.0.0-M2 a special BeanIntrospector suppresses the “declaredClass” property. Note that this new BeanIntrospector is enabled by default, but you can disable it to regain the old behavior; see section 2.5 of the user's guide and the unit tests.

      This issue affects Apache Commons BeanUtils 1.x before 1.11.0, and 2.x before 2.0.0-M2.Users of the artifact commons-beanutils:commons-beanutils

       1.x are recommended to upgrade to version 1.11.0, which fixes the issue.


      Users of the artifact org.apache.commons:commons-beanutils2

       2.x are recommended to upgrade to version 2.0.0-M2, which fixes the issue.
    Severity: HIGH
    CweIDs:
    - CWE-284
    VendorSeverity:
      amazon: 3
      ghsa: 3
      oracle-oval: 3
      redhat: 3
    CVSS:
      ghsa:
        V3Vector: CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H
        V3Score: 8.8
      redhat:
        V3Vector: CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H
        V3Score: 8.8
    References:
    - http://www.openwall.com/lists/oss-security/2025/05/28/6
    - https://access.redhat.com/security/cve/CVE-2025-48734
    - https://github.com/advisories/GHSA-wxr5-93ph-8wr9
    - https://github.com/apache/commons-beanutils
    - https://github.com/apache/commons-beanutils/commit/28ad955a1613ed5885870cc7da52093c1ce739dc
    - https://github.com/apache/commons-beanutils/commit/bd20740da25b69552ddef8523beec0837297eaf9
    - https://linux.oracle.com/cve/CVE-2025-48734.html
    - https://linux.oracle.com/errata/ELSA-2025-9166.html
    - https://lists.apache.org/thread/s0hb3jkfj5f3ryx6c57zqtfohb0of1g9
    - https://nvd.nist.gov/vuln/detail/CVE-2025-48734
    - https://www.cve.org/CVERecord?id=CVE-2025-48734
    - https://www.openwall.com/lists/oss-security/2025/05/28/6
    PublishedDate: '2025-05-28T14:15:34.07Z'
    LastModifiedDate: '2025-06-09T18:56:26.37Z'
  - VulnerabilityID: CVE-2025-27820
    PkgName: org.apache.httpcomponents.client5:httpclient5
    PkgPath: opt/dependency-check/lib/httpclient5-5.4.2.jar
    PkgIdentifier:
      PURL: pkg:maven/org.apache.httpcomponents.client5/httpclient5@5.4.2
      UID: 6ea72d58fcde5316
    InstalledVersion: 5.4.2
    FixedVersion: 5.4.3
    Status: fixed
    Layer:
      Digest: sha256:cc460b0ea5a2ccb4619d0a36b262eefa46989364cd09251c2eff201438c2e187
      DiffID: sha256:56550e2e223133013dae7e98693b65792714e75abb91e59fae058b8e1e54a03c
    SeveritySource: ghsa
    PrimaryURL: https://avd.aquasec.com/nvd/cve-2025-27820
    DataSource:
      ID: ghsa
      Name: GitHub Security Advisory Maven
      URL: https://github.com/advisories?query=type%3Areviewed+ecosystem%3Amaven
    Title: 'org.apache.httpcomponents.client5/httpclient5: Apache HttpComponents: PSL (Public Suffix List) validation bypass'
    Description: A bug in PSL validation logic in Apache HttpClient 5.4.x disables domain checks, affecting cookie management and host name verification. Discovered by the Apache HttpClient team. Fixed in the 5.4.3 release
    Severity: HIGH
    CweIDs:
    - CWE-295
    VendorSeverity:
      ghsa: 3
      redhat: 2
    CVSS:
      ghsa:
        V3Vector: CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:H/A:N
        V3Score: 7.5
      redhat:
        V3Vector: CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:H/A:N
        V3Score: 6.5
    References:
    - https://access.redhat.com/security/cve/CVE-2025-27820
    - https://github.com/advisories/GHSA-73m2-qfq3-56cx
    - https://github.com/apache/httpcomponents-client
    - https://github.com/apache/httpcomponents-client/pull/574
    - https://github.com/apache/httpcomponents-client/pull/621
    - https://hc.apache.org/httpcomponents-client-5.4.x/index.html
    - https://lists.apache.org/thread/55xhs40ncqv97qvoocok44995xp5kqn8
    - https://nvd.nist.gov/vuln/detail/CVE-2025-27820
    - https://security.netapp.com/advisory/ntap-20250516-0003
    - https://security.netapp.com/advisory/ntap-20250516-0003/
    - https://www.cve.org/CVERecord?id=CVE-2025-27820
    PublishedDate: '2025-04-24T12:15:16.723Z'
    LastModifiedDate: '2025-05-16T23:15:20.193Z'
- Target: Python
  Class: lang-pkgs
  Type: python-pkg
- Target: usr/bin/grype
  Class: lang-pkgs
  Type: gobinary
  Vulnerabilities:
  - VulnerabilityID: GHSA-fv92-fjc5-jj9h
    PkgID: github.com/go-viper/mapstructure/v2@v2.2.1
    PkgName: github.com/go-viper/mapstructure/v2
    PkgIdentifier:
      PURL: pkg:golang/github.com/go-viper/mapstructure/v2@v2.2.1
      UID: c480ecdc8d2bead9
    InstalledVersion: v2.2.1
    FixedVersion: 2.3.0
    Status: fixed
    Layer:
      Digest: sha256:cc460b0ea5a2ccb4619d0a36b262eefa46989364cd09251c2eff201438c2e187
      DiffID: sha256:56550e2e223133013dae7e98693b65792714e75abb91e59fae058b8e1e54a03c
    SeveritySource: ghsa
    PrimaryURL: https://github.com/advisories/GHSA-fv92-fjc5-jj9h
    DataSource:
      ID: ghsa
      Name: GitHub Security Advisory Go
      URL: https://github.com/advisories?query=type%3Areviewed+ecosystem%3Ago
    Title: mapstructure May Leak Sensitive Information in Logs When Processing Malformed Data
    Description: "### Summary\n\nUse of this library in a security-critical context may result in leaking sensitive information, if used to process sensitive fields.\n\n### Details\n\nOpenBao (and presumably HashiCorp Vault) have surfaced error messages from `mapstructure` as follows:\n\nhttps://github.com/openbao/openbao/blob/98c3a59c040efca724353ca46ca79bd5cdbab920/sdk/framework/field_data.go#L43-L50\n\n```go\n\t\t\t_, _, err := d.getPrimitive(field, schema)\n\t\t\tif err != nil {\n\t\t\t\treturn fmt.Errorf(\"error converting input for field %q: %w\", field, err)\n\t\t\t}\n```\n\nwhere this calls `mapstructure.WeakDecode(...)`: https://github.com/openbao/openbao/blob/98c3a59c040efca724353ca46ca79bd5cdbab920/sdk/framework/field_data.go#L181-L193\n\n```go\n\nfunc (d *FieldData) getPrimitive(k string, schema *FieldSchema) (interface{}, bool, error) {\n\traw, ok := d.Raw[k]\n\tif !ok {\n\t\treturn nil, false, nil\n\t}\n\n\tswitch t := schema.Type; t {\n\tcase TypeBool:\n\t\tvar result bool\n\t\tif err := mapstructure.WeakDecode(raw, &result); err != nil {\n\t\t\treturn nil, false, err\n\t\t}\n\t\treturn result, true, nil\n```\n\nNotably, `WeakDecode(...)` eventually calls one of the decode helpers, which surfaces the original value:\n\nhttps://github.com/go-viper/mapstructure/blob/1a66224d5e54d8757f63bd66339cf764c3292c21/mapstructure.go#L679-L686\n\nhttps://github.com/go-viper/mapstructure/blob/1a66224d5e54d8757f63bd66339cf764c3292c21/mapstructure.go#L726-L730\n\nhttps://github.com/go-viper/mapstructure/blob/1a66224d5e54d8757f63bd66339cf764c3292c21/mapstructure.go#L783-L787\n\n& more.\n\n### PoC\n\nTo reproduce with OpenBao:\n\n```\n$ podman run -p 8300:8300 openbao/openbao:latest server -dev -dev-root-token-id=root -dev-listen-address=0.0.0.0:8300\n```\n\nand in a new tab:\n\n```\n$ BAO_TOKEN=root BAO_ADDR=http://localhost:8300 bao auth enable userpass\nSuccess! Enabled userpass auth method at: userpass/\n$ curl -X PUT -H \"X-Vault-Request: true\" -H \"X-Vault-Token: root\" -d '{\"password\":{\"asdf\":\"my-sensitive-value\"}}' \"http://localhost:8300/v1/auth/userpass/users/adsf\"\n{\"errors\":[\"error converting input for field \\\"password\\\": '' expected type 'string', got unconvertible type 'map[string]interface {}', value: 'map[asdf:my-sensitive-value]'\"]}\n```\n\n### Impact\n\nThis is an information disclosure bug with little mitigation. See https://discuss.hashicorp.com/t/hcsec-2025-09-vault-may-expose-sensitive-information-in-error-logs-when-processing-malformed-data-with-the-kv-v2-plugin/74717 for a previous version. That version was fixed, but this is in the second part of that error message (starting at `'' expected a map, got 'string'` -- when the field type is `string` and a `map` is provided, we see the above information leak -- the previous example had a `map` type field with a `string` value provided).\n\nThis was rated 4.5 Medium by HashiCorp in the past iteration."
    Severity: MEDIUM
    VendorSeverity:
      ghsa: 2
    CVSS:
      ghsa:
        V3Vector: CVSS:3.1/AV:N/AC:H/PR:N/UI:R/S:U/C:H/I:N/A:N
        V3Score: 5.3
    References:
    - https://github.com/go-viper/mapstructure
    - https://github.com/go-viper/mapstructure/security/advisories/GHSA-fv92-fjc5-jj9h
    PublishedDate: '2025-06-27T16:24:59Z'
    LastModifiedDate: '2025-06-27T16:24:59Z'
- Target: usr/bin/syft
  Class: lang-pkgs
  Type: gobinary
  Vulnerabilities:
  - VulnerabilityID: GHSA-fv92-fjc5-jj9h
    PkgID: github.com/go-viper/mapstructure/v2@v2.2.1
    PkgName: github.com/go-viper/mapstructure/v2
    PkgIdentifier:
      PURL: pkg:golang/github.com/go-viper/mapstructure/v2@v2.2.1
      UID: d731bbbe20c19c71
    InstalledVersion: v2.2.1
    FixedVersion: 2.3.0
    Status: fixed
    Layer:
      Digest: sha256:cc460b0ea5a2ccb4619d0a36b262eefa46989364cd09251c2eff201438c2e187
      DiffID: sha256:56550e2e223133013dae7e98693b65792714e75abb91e59fae058b8e1e54a03c
    SeveritySource: ghsa
    PrimaryURL: https://github.com/advisories/GHSA-fv92-fjc5-jj9h
    DataSource:
      ID: ghsa
      Name: GitHub Security Advisory Go
      URL: https://github.com/advisories?query=type%3Areviewed+ecosystem%3Ago
    Title: mapstructure May Leak Sensitive Information in Logs When Processing Malformed Data
    Description: "### Summary\n\nUse of this library in a security-critical context may result in leaking sensitive information, if used to process sensitive fields.\n\n### Details\n\nOpenBao (and presumably HashiCorp Vault) have surfaced error messages from `mapstructure` as follows:\n\nhttps://github.com/openbao/openbao/blob/98c3a59c040efca724353ca46ca79bd5cdbab920/sdk/framework/field_data.go#L43-L50\n\n```go\n\t\t\t_, _, err := d.getPrimitive(field, schema)\n\t\t\tif err != nil {\n\t\t\t\treturn fmt.Errorf(\"error converting input for field %q: %w\", field, err)\n\t\t\t}\n```\n\nwhere this calls `mapstructure.WeakDecode(...)`: https://github.com/openbao/openbao/blob/98c3a59c040efca724353ca46ca79bd5cdbab920/sdk/framework/field_data.go#L181-L193\n\n```go\n\nfunc (d *FieldData) getPrimitive(k string, schema *FieldSchema) (interface{}, bool, error) {\n\traw, ok := d.Raw[k]\n\tif !ok {\n\t\treturn nil, false, nil\n\t}\n\n\tswitch t := schema.Type; t {\n\tcase TypeBool:\n\t\tvar result bool\n\t\tif err := mapstructure.WeakDecode(raw, &result); err != nil {\n\t\t\treturn nil, false, err\n\t\t}\n\t\treturn result, true, nil\n```\n\nNotably, `WeakDecode(...)` eventually calls one of the decode helpers, which surfaces the original value:\n\nhttps://github.com/go-viper/mapstructure/blob/1a66224d5e54d8757f63bd66339cf764c3292c21/mapstructure.go#L679-L686\n\nhttps://github.com/go-viper/mapstructure/blob/1a66224d5e54d8757f63bd66339cf764c3292c21/mapstructure.go#L726-L730\n\nhttps://github.com/go-viper/mapstructure/blob/1a66224d5e54d8757f63bd66339cf764c3292c21/mapstructure.go#L783-L787\n\n& more.\n\n### PoC\n\nTo reproduce with OpenBao:\n\n```\n$ podman run -p 8300:8300 openbao/openbao:latest server -dev -dev-root-token-id=root -dev-listen-address=0.0.0.0:8300\n```\n\nand in a new tab:\n\n```\n$ BAO_TOKEN=root BAO_ADDR=http://localhost:8300 bao auth enable userpass\nSuccess! Enabled userpass auth method at: userpass/\n$ curl -X PUT -H \"X-Vault-Request: true\" -H \"X-Vault-Token: root\" -d '{\"password\":{\"asdf\":\"my-sensitive-value\"}}' \"http://localhost:8300/v1/auth/userpass/users/adsf\"\n{\"errors\":[\"error converting input for field \\\"password\\\": '' expected type 'string', got unconvertible type 'map[string]interface {}', value: 'map[asdf:my-sensitive-value]'\"]}\n```\n\n### Impact\n\nThis is an information disclosure bug with little mitigation. See https://discuss.hashicorp.com/t/hcsec-2025-09-vault-may-expose-sensitive-information-in-error-logs-when-processing-malformed-data-with-the-kv-v2-plugin/74717 for a previous version. That version was fixed, but this is in the second part of that error message (starting at `'' expected a map, got 'string'` -- when the field type is `string` and a `map` is provided, we see the above information leak -- the previous example had a `map` type field with a `string` value provided).\n\nThis was rated 4.5 Medium by HashiCorp in the past iteration."
    Severity: MEDIUM
    VendorSeverity:
      ghsa: 2
    CVSS:
      ghsa:
        V3Vector: CVSS:3.1/AV:N/AC:H/PR:N/UI:R/S:U/C:H/I:N/A:N
        V3Score: 5.3
    References:
    - https://github.com/go-viper/mapstructure
    - https://github.com/go-viper/mapstructure/security/advisories/GHSA-fv92-fjc5-jj9h
    PublishedDate: '2025-06-27T16:24:59Z'
    LastModifiedDate: '2025-06-27T16:24:59Z'
- Target: usr/bin/trivy
  Class: lang-pkgs
  Type: gobinary
  Vulnerabilities:
  - VulnerabilityID: GHSA-fv92-fjc5-jj9h
    PkgID: github.com/go-viper/mapstructure/v2@v2.2.1
    PkgName: github.com/go-viper/mapstructure/v2
    PkgIdentifier:
      PURL: pkg:golang/github.com/go-viper/mapstructure/v2@v2.2.1
      UID: 5eed76ca10d6867
    InstalledVersion: v2.2.1
    FixedVersion: 2.3.0
    Status: fixed
    Layer:
      Digest: sha256:cc460b0ea5a2ccb4619d0a36b262eefa46989364cd09251c2eff201438c2e187
      DiffID: sha256:56550e2e223133013dae7e98693b65792714e75abb91e59fae058b8e1e54a03c
    SeveritySource: ghsa
    PrimaryURL: https://github.com/advisories/GHSA-fv92-fjc5-jj9h
    DataSource:
      ID: ghsa
      Name: GitHub Security Advisory Go
      URL: https://github.com/advisories?query=type%3Areviewed+ecosystem%3Ago
    Title: mapstructure May Leak Sensitive Information in Logs When Processing Malformed Data
    Description: "### Summary\n\nUse of this library in a security-critical context may result in leaking sensitive information, if used to process sensitive fields.\n\n### Details\n\nOpenBao (and presumably HashiCorp Vault) have surfaced error messages from `mapstructure` as follows:\n\nhttps://github.com/openbao/openbao/blob/98c3a59c040efca724353ca46ca79bd5cdbab920/sdk/framework/field_data.go#L43-L50\n\n```go\n\t\t\t_, _, err := d.getPrimitive(field, schema)\n\t\t\tif err != nil {\n\t\t\t\treturn fmt.Errorf(\"error converting input for field %q: %w\", field, err)\n\t\t\t}\n```\n\nwhere this calls `mapstructure.WeakDecode(...)`: https://github.com/openbao/openbao/blob/98c3a59c040efca724353ca46ca79bd5cdbab920/sdk/framework/field_data.go#L181-L193\n\n```go\n\nfunc (d *FieldData) getPrimitive(k string, schema *FieldSchema) (interface{}, bool, error) {\n\traw, ok := d.Raw[k]\n\tif !ok {\n\t\treturn nil, false, nil\n\t}\n\n\tswitch t := schema.Type; t {\n\tcase TypeBool:\n\t\tvar result bool\n\t\tif err := mapstructure.WeakDecode(raw, &result); err != nil {\n\t\t\treturn nil, false, err\n\t\t}\n\t\treturn result, true, nil\n```\n\nNotably, `WeakDecode(...)` eventually calls one of the decode helpers, which surfaces the original value:\n\nhttps://github.com/go-viper/mapstructure/blob/1a66224d5e54d8757f63bd66339cf764c3292c21/mapstructure.go#L679-L686\n\nhttps://github.com/go-viper/mapstructure/blob/1a66224d5e54d8757f63bd66339cf764c3292c21/mapstructure.go#L726-L730\n\nhttps://github.com/go-viper/mapstructure/blob/1a66224d5e54d8757f63bd66339cf764c3292c21/mapstructure.go#L783-L787\n\n& more.\n\n### PoC\n\nTo reproduce with OpenBao:\n\n```\n$ podman run -p 8300:8300 openbao/openbao:latest server -dev -dev-root-token-id=root -dev-listen-address=0.0.0.0:8300\n```\n\nand in a new tab:\n\n```\n$ BAO_TOKEN=root BAO_ADDR=http://localhost:8300 bao auth enable userpass\nSuccess! Enabled userpass auth method at: userpass/\n$ curl -X PUT -H \"X-Vault-Request: true\" -H \"X-Vault-Token: root\" -d '{\"password\":{\"asdf\":\"my-sensitive-value\"}}' \"http://localhost:8300/v1/auth/userpass/users/adsf\"\n{\"errors\":[\"error converting input for field \\\"password\\\": '' expected type 'string', got unconvertible type 'map[string]interface {}', value: 'map[asdf:my-sensitive-value]'\"]}\n```\n\n### Impact\n\nThis is an information disclosure bug with little mitigation. See https://discuss.hashicorp.com/t/hcsec-2025-09-vault-may-expose-sensitive-information-in-error-logs-when-processing-malformed-data-with-the-kv-v2-plugin/74717 for a previous version. That version was fixed, but this is in the second part of that error message (starting at `'' expected a map, got 'string'` -- when the field type is `string` and a `map` is provided, we see the above information leak -- the previous example had a `map` type field with a `string` value provided).\n\nThis was rated 4.5 Medium by HashiCorp in the past iteration."
    Severity: MEDIUM
    VendorSeverity:
      ghsa: 2
    CVSS:
      ghsa:
        V3Vector: CVSS:3.1/AV:N/AC:H/PR:N/UI:R/S:U/C:H/I:N/A:N
        V3Score: 5.3
    References:
    - https://github.com/go-viper/mapstructure
    - https://github.com/go-viper/mapstructure/security/advisories/GHSA-fv92-fjc5-jj9h
    PublishedDate: '2025-06-27T16:24:59Z'
    LastModifiedDate: '2025-06-27T16:24:59Z'
  - VulnerabilityID: CVE-2025-22874
    PkgID: stdlib@v1.24.2
    PkgName: stdlib
    PkgIdentifier:
      PURL: pkg:golang/stdlib@v1.24.2
      UID: 2475b985111415cc
    InstalledVersion: v1.24.2
    FixedVersion: 1.24.4
    Status: fixed
    Layer:
      Digest: sha256:cc460b0ea5a2ccb4619d0a36b262eefa46989364cd09251c2eff201438c2e187
      DiffID: sha256:56550e2e223133013dae7e98693b65792714e75abb91e59fae058b8e1e54a03c
    PrimaryURL: https://avd.aquasec.com/nvd/cve-2025-22874
    DataSource:
      ID: govulndb
      Name: The Go Vulnerability Database
      URL: https://pkg.go.dev/vuln/
    Title: 'crypto/x509: Usage of ExtKeyUsageAny disables policy validation in crypto/x509'
    Description: Calling Verify with a VerifyOptions.KeyUsages that contains ExtKeyUsageAny unintentionally disabledpolicy validation. This only affected certificate chains which contain policy graphs, which are rather uncommon.
    Severity: HIGH
    VendorSeverity:
      amazon: 2
      bitnami: 3
      redhat: 3
    CVSS:
      bitnami:
        V3Vector: CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:H/A:N
        V3Score: 7.5
      redhat:
        V3Vector: CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:H/A:N
        V3Score: 7.5
    References:
    - https://access.redhat.com/security/cve/CVE-2025-22874
    - https://go.dev/cl/670375
    - https://go.dev/issue/73612
    - https://groups.google.com/g/golang-announce/c/ufZ8WpEsA3A
    - https://nvd.nist.gov/vuln/detail/CVE-2025-22874
    - https://pkg.go.dev/vuln/GO-2025-3749
    - https://www.cve.org/CVERecord?id=CVE-2025-22874
    PublishedDate: '2025-06-11T17:15:42.167Z'
    LastModifiedDate: '2025-06-12T16:06:20.18Z'
  - VulnerabilityID: CVE-2025-0913
    PkgID: stdlib@v1.24.2
    PkgName: stdlib
    PkgIdentifier:
      PURL: pkg:golang/stdlib@v1.24.2
      UID: 2475b985111415cc
    InstalledVersion: v1.24.2
    FixedVersion: 1.23.10, 1.24.4
    Status: fixed
    Layer:
      Digest: sha256:cc460b0ea5a2ccb4619d0a36b262eefa46989364cd09251c2eff201438c2e187
      DiffID: sha256:56550e2e223133013dae7e98693b65792714e75abb91e59fae058b8e1e54a03c
    PrimaryURL: https://avd.aquasec.com/nvd/cve-2025-0913
    DataSource:
      ID: govulndb
      Name: The Go Vulnerability Database
      URL: https://pkg.go.dev/vuln/
    Title: Inconsistent handling of O_CREATE|O_EXCL on Unix and Windows in os in syscall
    Description: os.OpenFile(path, os.O_CREATE|O_EXCL) behaved differently on Unix and Windows systems when the target path was a dangling symlink. On Unix systems, OpenFile with O_CREATE and O_EXCL flags never follows symlinks. On Windows, when the target path was a symlink to a nonexistent location, OpenFile would create a file in that location. OpenFile now always returns an error when the O_CREATE and O_EXCL flags are both set and the target path is a symlink.
    Severity: MEDIUM
    VendorSeverity:
      bitnami: 2
    CVSS:
      bitnami:
        V3Vector: CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:N/I:H/A:N
        V3Score: 5.5
    References:
    - https://go.dev/cl/672396
    - https://go.dev/issue/73702
    - https://groups.google.com/g/golang-announce/c/ufZ8WpEsA3A
    - https://nvd.nist.gov/vuln/detail/CVE-2025-0913
    - https://pkg.go.dev/vuln/GO-2025-3750
    PublishedDate: '2025-06-11T18:15:24.627Z'
    LastModifiedDate: '2025-06-12T16:06:20.18Z'
  - VulnerabilityID: CVE-2025-4673
    PkgID: stdlib@v1.24.2
    PkgName: stdlib
    PkgIdentifier:
      PURL: pkg:golang/stdlib@v1.24.2
      UID: 2475b985111415cc
    InstalledVersion: v1.24.2
    FixedVersion: 1.23.10, 1.24.4
    Status: fixed
    Layer:
      Digest: sha256:cc460b0ea5a2ccb4619d0a36b262eefa46989364cd09251c2eff201438c2e187
      DiffID: sha256:56550e2e223133013dae7e98693b65792714e75abb91e59fae058b8e1e54a03c
    PrimaryURL: https://avd.aquasec.com/nvd/cve-2025-4673
    DataSource:
      ID: govulndb
      Name: The Go Vulnerability Database
      URL: https://pkg.go.dev/vuln/
    Title: 'net/http: Sensitive headers not cleared on cross-origin redirect in net/http'
    Description: Proxy-Authorization and Proxy-Authenticate headers persisted on cross-origin redirects potentially leaking sensitive information.
    Severity: MEDIUM
    VendorSeverity:
      amazon: 2
      bitnami: 2
      redhat: 2
      ubuntu: 2
    CVSS:
      bitnami:
        V3Vector: CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:C/C:H/I:N/A:N
        V3Score: 6.8
      redhat:
        V3Vector: CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:C/C:H/I:N/A:N
        V3Score: 6.8
    References:
    - https://access.redhat.com/security/cve/CVE-2025-4673
    - https://go.dev/cl/679257
    - https://go.dev/issue/73816
    - https://groups.google.com/g/golang-announce/c/ufZ8WpEsA3A
    - https://nvd.nist.gov/vuln/detail/CVE-2025-4673
    - https://pkg.go.dev/vuln/GO-2025-3751
    - https://ubuntu.com/security/notices/USN-7574-1
    - https://www.cve.org/CVERecord?id=CVE-2025-4673
    PublishedDate: '2025-06-11T17:15:42.993Z'
    LastModifiedDate: '2025-06-12T16:06:20.18Z'
- Target: usr/bin/trivy_cve_query
  Class: lang-pkgs
  Type: gobinary
