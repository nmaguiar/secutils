- Target: nmaguiar/secutils:build (alpine 3.23.0_alpha20250612)
  Class: os-pkgs
  Type: alpine
  Vulnerabilities:
  - VulnerabilityID: CVE-2025-10148
    PkgID: curl@8.15.0-r0
    PkgName: curl
    PkgIdentifier:
      PURL: pkg:apk/alpine/curl@8.15.0-r0?arch=x86_64&distro=3.23.0_alpha20250612
      UID: 5371f8b941130cc
    InstalledVersion: 8.15.0-r0
    FixedVersion: 8.16.0-r0
    Status: fixed
    Layer:
      Digest: sha256:c9aa02a097bcc2f3b15d59a445e2530cac3267443643501dd6062bd50a4b6afe
      DiffID: sha256:91d87e0c10c73b9d231ea18fd376e9b8495522228fc7c7d38461b41e40aab9e7
    PrimaryURL: https://avd.aquasec.com/nvd/cve-2025-10148
    DataSource:
      ID: alpine
      Name: Alpine Secdb
      URL: https://secdb.alpinelinux.org/
    Title: 'curl: predictable WebSocket mask'
    Description: |-
      curl's websocket code did not update the 32 bit mask pattern for each new
       outgoing frame as the specification says. Instead it used a fixed mask that
      persisted and was used throughout the entire connection.

      A predictable mask pattern allows for a malicious server to induce traffic
      between the two communicating parties that could be interpreted by an involved
      proxy (configured or transparent) as genuine, real, HTTP traffic with content
      and thereby poison its cache. That cached poisoned content could then be
      served to all users of that proxy.
    Severity: MEDIUM
    VendorSeverity:
      redhat: 1
      ubuntu: 1
    CVSS:
      redhat:
        V3Vector: CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:L/A:N
        V3Score: 4.8
    References:
    - https://access.redhat.com/security/cve/CVE-2025-10148
    - https://curl.se/docs/CVE-2025-10148.html
    - https://curl.se/docs/CVE-2025-10148.json
    - https://hackerone.com/reports/3330839
    - https://nvd.nist.gov/vuln/detail/CVE-2025-10148
    - https://www.cve.org/CVERecord?id=CVE-2025-10148
    PublishedDate: '2025-09-12T06:15:40.02Z'
    LastModifiedDate: '2025-09-12T18:15:33.233Z'
  - VulnerabilityID: CVE-2025-9086
    PkgID: curl@8.15.0-r0
    PkgName: curl
    PkgIdentifier:
      PURL: pkg:apk/alpine/curl@8.15.0-r0?arch=x86_64&distro=3.23.0_alpha20250612
      UID: 5371f8b941130cc
    InstalledVersion: 8.15.0-r0
    FixedVersion: 8.16.0-r0
    Status: fixed
    Layer:
      Digest: sha256:c9aa02a097bcc2f3b15d59a445e2530cac3267443643501dd6062bd50a4b6afe
      DiffID: sha256:91d87e0c10c73b9d231ea18fd376e9b8495522228fc7c7d38461b41e40aab9e7
    PrimaryURL: https://avd.aquasec.com/nvd/cve-2025-9086
    DataSource:
      ID: alpine
      Name: Alpine Secdb
      URL: https://secdb.alpinelinux.org/
    Title: 'curl: libcurl: Curl out of bounds read for cookie path'
    Description: |-
      1. A cookie is set using the `secure` keyword for `https://target`
      2. curl is redirected to or otherwise made to speak with `http://target` (same
         hostname, but using clear text HTTP) using the same cookie set
      3. The same cookie name is set - but with just a slash as path (`path='/'`).
         Since this site is not secure, the cookie *should* just be ignored.
      4. A bug in the path comparison logic makes curl read outside a heap buffer
         boundary

      The bug either causes a crash or it potentially makes the comparison come to
      the wrong conclusion and lets the clear-text site override the contents of the
      secure cookie, contrary to expectations and depending on the memory contents
      immediately following the single-byte allocation that holds the path.

      The presumed and correct behavior would be to plainly ignore the second set of
      the cookie since it was already set as secure on a secure host so overriding
      it on an insecure host should not be okay.
    Severity: MEDIUM
    VendorSeverity:
      redhat: 2
      ubuntu: 1
    CVSS:
      redhat:
        V3Vector: CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L
        V3Score: 5.3
    References:
    - https://access.redhat.com/security/cve/CVE-2025-9086
    - https://curl.se/docs/CVE-2025-9086.html
    - https://curl.se/docs/CVE-2025-9086.json
    - https://github.com/curl/curl/commit/c6ae07c6a541e0e96d0040afb6
    - https://hackerone.com/reports/3294999
    - https://nvd.nist.gov/vuln/detail/CVE-2025-9086
    - https://www.cve.org/CVERecord?id=CVE-2025-9086
    PublishedDate: '2025-09-12T06:15:44.1Z'
    LastModifiedDate: '2025-09-12T18:15:35.167Z'
  - VulnerabilityID: CVE-2025-54388
    PkgID: docker@28.3.2-r0
    PkgName: docker
    PkgIdentifier:
      PURL: pkg:apk/alpine/docker@28.3.2-r0?arch=x86_64&distro=3.23.0_alpha20250612
      UID: a3a094e5b97da25e
    InstalledVersion: 28.3.2-r0
    FixedVersion: 28.3.3-r0
    Status: fixed
    Layer:
      Digest: sha256:c9aa02a097bcc2f3b15d59a445e2530cac3267443643501dd6062bd50a4b6afe
      DiffID: sha256:91d87e0c10c73b9d231ea18fd376e9b8495522228fc7c7d38461b41e40aab9e7
    SeveritySource: nvd
    PrimaryURL: https://avd.aquasec.com/nvd/cve-2025-54388
    DataSource:
      ID: alpine
      Name: Alpine Secdb
      URL: https://secdb.alpinelinux.org/
    Title: 'github.com/moby/moby: Moby''s Firewalld reload makes container ports accessible'
    Description: Moby is an open source container framework developed by Docker Inc. that is distributed as Docker Engine, Mirantis Container Runtime, and various other downstream projects/products. In versions 28.2.0 through 28.3.2, when the firewalld service is reloaded it removes all iptables rules including those created by Docker. While Docker should automatically recreate these rules, versions before 28.3.3 fail to recreate the specific rules that block external access to containers. This means that after a firewalld reload, containers with ports published to localhost (like 127.0.0.1:8080) become accessible from remote machines that have network routing to the Docker bridge, even though they should only be accessible from the host itself. The vulnerability only affects explicitly published ports - unpublished ports remain protected. This issue is fixed in version 28.3.3.
    Severity: MEDIUM
    CweIDs:
    - CWE-909
    VendorSeverity:
      ghsa: 2
      nvd: 2
      redhat: 2
    CVSS:
      ghsa:
        V3Vector: CVSS:3.1/AV:A/AC:L/PR:N/UI:R/S:U/C:L/I:L/A:N
        V3Score: 4.6
      nvd:
        V3Vector: CVSS:3.1/AV:A/AC:L/PR:N/UI:R/S:U/C:L/I:L/A:N
        V3Score: 4.6
      redhat:
        V3Vector: CVSS:3.1/AV:A/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N
        V3Score: 5.2
    References:
    - https://access.redhat.com/security/cve/CVE-2025-54388
    - https://github.com/moby/moby
    - https://github.com/moby/moby/commit/bea959c7b793b32a893820b97c4eadc7c87fabb0
    - https://github.com/moby/moby/pull/50506
    - https://github.com/moby/moby/security/advisories/GHSA-x4rx-4gw3-53p4
    - https://nvd.nist.gov/vuln/detail/CVE-2025-54388
    - https://www.cve.org/CVERecord?id=CVE-2025-54388
    PublishedDate: '2025-07-30T14:15:28.693Z'
    LastModifiedDate: '2025-09-08T16:34:31.63Z'
  - VulnerabilityID: CVE-2025-54388
    PkgID: docker-bash-completion@28.3.2-r0
    PkgName: docker-bash-completion
    PkgIdentifier:
      PURL: pkg:apk/alpine/docker-bash-completion@28.3.2-r0?arch=x86_64&distro=3.23.0_alpha20250612
      UID: 65d5c5763fc4e499
    InstalledVersion: 28.3.2-r0
    FixedVersion: 28.3.3-r0
    Status: fixed
    Layer:
      Digest: sha256:c9aa02a097bcc2f3b15d59a445e2530cac3267443643501dd6062bd50a4b6afe
      DiffID: sha256:91d87e0c10c73b9d231ea18fd376e9b8495522228fc7c7d38461b41e40aab9e7
    SeveritySource: nvd
    PrimaryURL: https://avd.aquasec.com/nvd/cve-2025-54388
    DataSource:
      ID: alpine
      Name: Alpine Secdb
      URL: https://secdb.alpinelinux.org/
    Title: 'github.com/moby/moby: Moby''s Firewalld reload makes container ports accessible'
    Description: Moby is an open source container framework developed by Docker Inc. that is distributed as Docker Engine, Mirantis Container Runtime, and various other downstream projects/products. In versions 28.2.0 through 28.3.2, when the firewalld service is reloaded it removes all iptables rules including those created by Docker. While Docker should automatically recreate these rules, versions before 28.3.3 fail to recreate the specific rules that block external access to containers. This means that after a firewalld reload, containers with ports published to localhost (like 127.0.0.1:8080) become accessible from remote machines that have network routing to the Docker bridge, even though they should only be accessible from the host itself. The vulnerability only affects explicitly published ports - unpublished ports remain protected. This issue is fixed in version 28.3.3.
    Severity: MEDIUM
    CweIDs:
    - CWE-909
    VendorSeverity:
      ghsa: 2
      nvd: 2
      redhat: 2
    CVSS:
      ghsa:
        V3Vector: CVSS:3.1/AV:A/AC:L/PR:N/UI:R/S:U/C:L/I:L/A:N
        V3Score: 4.6
      nvd:
        V3Vector: CVSS:3.1/AV:A/AC:L/PR:N/UI:R/S:U/C:L/I:L/A:N
        V3Score: 4.6
      redhat:
        V3Vector: CVSS:3.1/AV:A/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N
        V3Score: 5.2
    References:
    - https://access.redhat.com/security/cve/CVE-2025-54388
    - https://github.com/moby/moby
    - https://github.com/moby/moby/commit/bea959c7b793b32a893820b97c4eadc7c87fabb0
    - https://github.com/moby/moby/pull/50506
    - https://github.com/moby/moby/security/advisories/GHSA-x4rx-4gw3-53p4
    - https://nvd.nist.gov/vuln/detail/CVE-2025-54388
    - https://www.cve.org/CVERecord?id=CVE-2025-54388
    PublishedDate: '2025-07-30T14:15:28.693Z'
    LastModifiedDate: '2025-09-08T16:34:31.63Z'
  - VulnerabilityID: CVE-2025-54388
    PkgID: docker-cli@28.3.2-r0
    PkgName: docker-cli
    PkgIdentifier:
      PURL: pkg:apk/alpine/docker-cli@28.3.2-r0?arch=x86_64&distro=3.23.0_alpha20250612
      UID: 8656405a0a652f40
    InstalledVersion: 28.3.2-r0
    FixedVersion: 28.3.3-r0
    Status: fixed
    Layer:
      Digest: sha256:c9aa02a097bcc2f3b15d59a445e2530cac3267443643501dd6062bd50a4b6afe
      DiffID: sha256:91d87e0c10c73b9d231ea18fd376e9b8495522228fc7c7d38461b41e40aab9e7
    SeveritySource: nvd
    PrimaryURL: https://avd.aquasec.com/nvd/cve-2025-54388
    DataSource:
      ID: alpine
      Name: Alpine Secdb
      URL: https://secdb.alpinelinux.org/
    Title: 'github.com/moby/moby: Moby''s Firewalld reload makes container ports accessible'
    Description: Moby is an open source container framework developed by Docker Inc. that is distributed as Docker Engine, Mirantis Container Runtime, and various other downstream projects/products. In versions 28.2.0 through 28.3.2, when the firewalld service is reloaded it removes all iptables rules including those created by Docker. While Docker should automatically recreate these rules, versions before 28.3.3 fail to recreate the specific rules that block external access to containers. This means that after a firewalld reload, containers with ports published to localhost (like 127.0.0.1:8080) become accessible from remote machines that have network routing to the Docker bridge, even though they should only be accessible from the host itself. The vulnerability only affects explicitly published ports - unpublished ports remain protected. This issue is fixed in version 28.3.3.
    Severity: MEDIUM
    CweIDs:
    - CWE-909
    VendorSeverity:
      ghsa: 2
      nvd: 2
      redhat: 2
    CVSS:
      ghsa:
        V3Vector: CVSS:3.1/AV:A/AC:L/PR:N/UI:R/S:U/C:L/I:L/A:N
        V3Score: 4.6
      nvd:
        V3Vector: CVSS:3.1/AV:A/AC:L/PR:N/UI:R/S:U/C:L/I:L/A:N
        V3Score: 4.6
      redhat:
        V3Vector: CVSS:3.1/AV:A/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N
        V3Score: 5.2
    References:
    - https://access.redhat.com/security/cve/CVE-2025-54388
    - https://github.com/moby/moby
    - https://github.com/moby/moby/commit/bea959c7b793b32a893820b97c4eadc7c87fabb0
    - https://github.com/moby/moby/pull/50506
    - https://github.com/moby/moby/security/advisories/GHSA-x4rx-4gw3-53p4
    - https://nvd.nist.gov/vuln/detail/CVE-2025-54388
    - https://www.cve.org/CVERecord?id=CVE-2025-54388
    PublishedDate: '2025-07-30T14:15:28.693Z'
    LastModifiedDate: '2025-09-08T16:34:31.63Z'
  - VulnerabilityID: CVE-2025-54388
    PkgID: docker-engine@28.3.2-r0
    PkgName: docker-engine
    PkgIdentifier:
      PURL: pkg:apk/alpine/docker-engine@28.3.2-r0?arch=x86_64&distro=3.23.0_alpha20250612
      UID: 7402f05110c51fa5
    InstalledVersion: 28.3.2-r0
    FixedVersion: 28.3.3-r0
    Status: fixed
    Layer:
      Digest: sha256:c9aa02a097bcc2f3b15d59a445e2530cac3267443643501dd6062bd50a4b6afe
      DiffID: sha256:91d87e0c10c73b9d231ea18fd376e9b8495522228fc7c7d38461b41e40aab9e7
    SeveritySource: nvd
    PrimaryURL: https://avd.aquasec.com/nvd/cve-2025-54388
    DataSource:
      ID: alpine
      Name: Alpine Secdb
      URL: https://secdb.alpinelinux.org/
    Title: 'github.com/moby/moby: Moby''s Firewalld reload makes container ports accessible'
    Description: Moby is an open source container framework developed by Docker Inc. that is distributed as Docker Engine, Mirantis Container Runtime, and various other downstream projects/products. In versions 28.2.0 through 28.3.2, when the firewalld service is reloaded it removes all iptables rules including those created by Docker. While Docker should automatically recreate these rules, versions before 28.3.3 fail to recreate the specific rules that block external access to containers. This means that after a firewalld reload, containers with ports published to localhost (like 127.0.0.1:8080) become accessible from remote machines that have network routing to the Docker bridge, even though they should only be accessible from the host itself. The vulnerability only affects explicitly published ports - unpublished ports remain protected. This issue is fixed in version 28.3.3.
    Severity: MEDIUM
    CweIDs:
    - CWE-909
    VendorSeverity:
      ghsa: 2
      nvd: 2
      redhat: 2
    CVSS:
      ghsa:
        V3Vector: CVSS:3.1/AV:A/AC:L/PR:N/UI:R/S:U/C:L/I:L/A:N
        V3Score: 4.6
      nvd:
        V3Vector: CVSS:3.1/AV:A/AC:L/PR:N/UI:R/S:U/C:L/I:L/A:N
        V3Score: 4.6
      redhat:
        V3Vector: CVSS:3.1/AV:A/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N
        V3Score: 5.2
    References:
    - https://access.redhat.com/security/cve/CVE-2025-54388
    - https://github.com/moby/moby
    - https://github.com/moby/moby/commit/bea959c7b793b32a893820b97c4eadc7c87fabb0
    - https://github.com/moby/moby/pull/50506
    - https://github.com/moby/moby/security/advisories/GHSA-x4rx-4gw3-53p4
    - https://nvd.nist.gov/vuln/detail/CVE-2025-54388
    - https://www.cve.org/CVERecord?id=CVE-2025-54388
    PublishedDate: '2025-07-30T14:15:28.693Z'
    LastModifiedDate: '2025-09-08T16:34:31.63Z'
  - VulnerabilityID: CVE-2025-10148
    PkgID: libcurl@8.15.0-r0
    PkgName: libcurl
    PkgIdentifier:
      PURL: pkg:apk/alpine/libcurl@8.15.0-r0?arch=x86_64&distro=3.23.0_alpha20250612
      UID: 18280e719f28fc16
    InstalledVersion: 8.15.0-r0
    FixedVersion: 8.16.0-r0
    Status: fixed
    Layer:
      Digest: sha256:c9aa02a097bcc2f3b15d59a445e2530cac3267443643501dd6062bd50a4b6afe
      DiffID: sha256:91d87e0c10c73b9d231ea18fd376e9b8495522228fc7c7d38461b41e40aab9e7
    PrimaryURL: https://avd.aquasec.com/nvd/cve-2025-10148
    DataSource:
      ID: alpine
      Name: Alpine Secdb
      URL: https://secdb.alpinelinux.org/
    Title: 'curl: predictable WebSocket mask'
    Description: |-
      curl's websocket code did not update the 32 bit mask pattern for each new
       outgoing frame as the specification says. Instead it used a fixed mask that
      persisted and was used throughout the entire connection.

      A predictable mask pattern allows for a malicious server to induce traffic
      between the two communicating parties that could be interpreted by an involved
      proxy (configured or transparent) as genuine, real, HTTP traffic with content
      and thereby poison its cache. That cached poisoned content could then be
      served to all users of that proxy.
    Severity: MEDIUM
    VendorSeverity:
      redhat: 1
      ubuntu: 1
    CVSS:
      redhat:
        V3Vector: CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:L/A:N
        V3Score: 4.8
    References:
    - https://access.redhat.com/security/cve/CVE-2025-10148
    - https://curl.se/docs/CVE-2025-10148.html
    - https://curl.se/docs/CVE-2025-10148.json
    - https://hackerone.com/reports/3330839
    - https://nvd.nist.gov/vuln/detail/CVE-2025-10148
    - https://www.cve.org/CVERecord?id=CVE-2025-10148
    PublishedDate: '2025-09-12T06:15:40.02Z'
    LastModifiedDate: '2025-09-12T18:15:33.233Z'
  - VulnerabilityID: CVE-2025-9086
    PkgID: libcurl@8.15.0-r0
    PkgName: libcurl
    PkgIdentifier:
      PURL: pkg:apk/alpine/libcurl@8.15.0-r0?arch=x86_64&distro=3.23.0_alpha20250612
      UID: 18280e719f28fc16
    InstalledVersion: 8.15.0-r0
    FixedVersion: 8.16.0-r0
    Status: fixed
    Layer:
      Digest: sha256:c9aa02a097bcc2f3b15d59a445e2530cac3267443643501dd6062bd50a4b6afe
      DiffID: sha256:91d87e0c10c73b9d231ea18fd376e9b8495522228fc7c7d38461b41e40aab9e7
    PrimaryURL: https://avd.aquasec.com/nvd/cve-2025-9086
    DataSource:
      ID: alpine
      Name: Alpine Secdb
      URL: https://secdb.alpinelinux.org/
    Title: 'curl: libcurl: Curl out of bounds read for cookie path'
    Description: |-
      1. A cookie is set using the `secure` keyword for `https://target`
      2. curl is redirected to or otherwise made to speak with `http://target` (same
         hostname, but using clear text HTTP) using the same cookie set
      3. The same cookie name is set - but with just a slash as path (`path='/'`).
         Since this site is not secure, the cookie *should* just be ignored.
      4. A bug in the path comparison logic makes curl read outside a heap buffer
         boundary

      The bug either causes a crash or it potentially makes the comparison come to
      the wrong conclusion and lets the clear-text site override the contents of the
      secure cookie, contrary to expectations and depending on the memory contents
      immediately following the single-byte allocation that holds the path.

      The presumed and correct behavior would be to plainly ignore the second set of
      the cookie since it was already set as secure on a secure host so overriding
      it on an insecure host should not be okay.
    Severity: MEDIUM
    VendorSeverity:
      redhat: 2
      ubuntu: 1
    CVSS:
      redhat:
        V3Vector: CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L
        V3Score: 5.3
    References:
    - https://access.redhat.com/security/cve/CVE-2025-9086
    - https://curl.se/docs/CVE-2025-9086.html
    - https://curl.se/docs/CVE-2025-9086.json
    - https://github.com/curl/curl/commit/c6ae07c6a541e0e96d0040afb6
    - https://hackerone.com/reports/3294999
    - https://nvd.nist.gov/vuln/detail/CVE-2025-9086
    - https://www.cve.org/CVERecord?id=CVE-2025-9086
    PublishedDate: '2025-09-12T06:15:44.1Z'
    LastModifiedDate: '2025-09-12T18:15:35.167Z'
  - VulnerabilityID: CVE-2025-58050
    PkgID: pcre2@10.43-r1
    PkgName: pcre2
    PkgIdentifier:
      PURL: pkg:apk/alpine/pcre2@10.43-r1?arch=x86_64&distro=3.23.0_alpha20250612
      UID: 135571a2ca7a2cf2
    InstalledVersion: 10.43-r1
    FixedVersion: 10.46-r0
    Status: fixed
    Layer:
      Digest: sha256:c9aa02a097bcc2f3b15d59a445e2530cac3267443643501dd6062bd50a4b6afe
      DiffID: sha256:91d87e0c10c73b9d231ea18fd376e9b8495522228fc7c7d38461b41e40aab9e7
    SeveritySource: nvd
    PrimaryURL: https://avd.aquasec.com/nvd/cve-2025-58050
    DataSource:
      ID: alpine
      Name: Alpine Secdb
      URL: https://secdb.alpinelinux.org/
    Title: 'pcre2: PCRE2: heap-buffer-overflow read in match_ref due to missing boundary restoration in SCS'
    Description: The PCRE2 library is a set of C functions that implement regular expression pattern matching. In version 10.45, a heap-buffer-overflow read vulnerability exists in the PCRE2 regular expression matching engine, specifically within the handling of the (*scs:...) (Scan SubString) verb when combined with (*ACCEPT) in src/pcre2_match.c. This vulnerability may potentially lead to information disclosure if the out-of-bounds data read during the memcmp affects the final match result in a way observable by the attacker. This issue has been resolved in version 10.46.
    Severity: CRITICAL
    CweIDs:
    - CWE-122
    - CWE-125
    - CWE-787
    VendorSeverity:
      nvd: 4
      redhat: 2
      ubuntu: 2
    CVSS:
      nvd:
        V3Vector: CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:H
        V3Score: 9.1
      redhat:
        V3Vector: CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:L
        V3Score: 6.5
    References:
    - https://access.redhat.com/security/cve/CVE-2025-58050
    - https://github.com/PCRE2Project/pcre2/commit/a141712e5967d448c7ce13090ab530c8e3d82254
    - https://github.com/PCRE2Project/pcre2/releases/tag/pcre2-10.46
    - https://github.com/PCRE2Project/pcre2/security/advisories/GHSA-c2gv-xgf5-5cc2
    - https://nvd.nist.gov/vuln/detail/CVE-2025-58050
    - https://www.cve.org/CVERecord?id=CVE-2025-58050
    PublishedDate: '2025-08-27T19:15:37.56Z'
    LastModifiedDate: '2025-09-09T15:27:39.573Z'
- Target: Java
  Class: lang-pkgs
  Type: jar
  Vulnerabilities:
  - VulnerabilityID: CVE-2024-12798
    PkgName: ch.qos.logback:logback-core
    PkgPath: opt/dependency-check/lib/logback-core-1.2.13.jar
    PkgIdentifier:
      PURL: pkg:maven/ch.qos.logback/logback-core@1.2.13
      UID: 75945d17fdbc7707
    InstalledVersion: 1.2.13
    FixedVersion: 1.5.13, 1.3.15
    Status: fixed
    Layer:
      Digest: sha256:c9aa02a097bcc2f3b15d59a445e2530cac3267443643501dd6062bd50a4b6afe
      DiffID: sha256:91d87e0c10c73b9d231ea18fd376e9b8495522228fc7c7d38461b41e40aab9e7
    SeveritySource: ghsa
    PrimaryURL: https://avd.aquasec.com/nvd/cve-2024-12798
    DataSource:
      ID: ghsa
      Name: GitHub Security Advisory Maven
      URL: https://github.com/advisories?query=type%3Areviewed+ecosystem%3Amaven
    Title: 'logback-core: arbitrary code execution via JaninoEventEvaluator'
    Description: "ACE vulnerability in JaninoEventEvaluator  by QOS.CH logback-core\n      upto including version 0.1 to 1.3.14 and\_1.4.0 to 1.5.12 in Java applications allows\n      attacker to execute arbitrary code by compromising an existing\n      logback configuration file or by injecting an environment variable\n      before program execution.\n\n\n\n\n\nMalicious logback configuration files can allow the attacker to execute \narbitrary code using the JaninoEventEvaluator extension.\n\n\n\nA successful attack requires the user to have write access to a \nconfiguration file. Alternatively, the attacker could inject a malicious \nenvironment variable pointing to a malicious configuration file. In both \ncases, the attack requires existing privilege."
    Severity: MEDIUM
    CweIDs:
    - CWE-917
    VendorSeverity:
      ghsa: 2
      redhat: 2
    CVSS:
      redhat:
        V3Vector: CVSS:3.1/AV:L/AC:H/PR:L/UI:R/S:U/C:L/I:H/A:L
        V3Score: 5.5
    References:
    - https://access.redhat.com/security/cve/CVE-2024-12798
    - https://github.com/qos-ch/logback
    - https://github.com/qos-ch/logback/commit/2cb6d520df7592ef1c3a198f1b5df3c10c93e183
    - https://logback.qos.ch/news.html#1.3.15
    - https://logback.qos.ch/news.html#1.5.13
    - https://nvd.nist.gov/vuln/detail/CVE-2024-12798
    - https://www.cve.org/CVERecord?id=CVE-2024-12798
    PublishedDate: '2024-12-19T16:15:07.557Z'
    LastModifiedDate: '2025-01-03T14:15:24.37Z'
  - VulnerabilityID: CVE-2024-12801
    PkgName: ch.qos.logback:logback-core
    PkgPath: opt/dependency-check/lib/logback-core-1.2.13.jar
    PkgIdentifier:
      PURL: pkg:maven/ch.qos.logback/logback-core@1.2.13
      UID: 75945d17fdbc7707
    InstalledVersion: 1.2.13
    FixedVersion: 1.5.13, 1.3.15
    Status: fixed
    Layer:
      Digest: sha256:c9aa02a097bcc2f3b15d59a445e2530cac3267443643501dd6062bd50a4b6afe
      DiffID: sha256:91d87e0c10c73b9d231ea18fd376e9b8495522228fc7c7d38461b41e40aab9e7
    SeveritySource: ghsa
    PrimaryURL: https://avd.aquasec.com/nvd/cve-2024-12801
    DataSource:
      ID: ghsa
      Name: GitHub Security Advisory Maven
      URL: https://github.com/advisories?query=type%3Areviewed+ecosystem%3Amaven
    Title: 'logback-core: SaxEventRecorder vulnerable to Server-Side Request Forgery (SSRF) attacks'
    Description: "Server-Side Request Forgery (SSRF) in SaxEventRecorder by QOS.CH logback version 0.1 to 1.3.14 and 1.4.0 to 1.5.12\_ on the Java platform, allows an attacker to \nforge requests by compromising logback configuration files in XML.\n\n\n\nThe attacks involves the modification of DOCTYPE declaration in\_ XML configuration files."
    Severity: LOW
    CweIDs:
    - CWE-918
    VendorSeverity:
      ghsa: 1
      redhat: 1
    CVSS:
      redhat:
        V3Vector: CVSS:3.1/AV:L/AC:H/PR:L/UI:R/S:U/C:L/I:L/A:N
        V3Score: 3.3
    References:
    - https://access.redhat.com/security/cve/CVE-2024-12801
    - https://github.com/qos-ch/logback
    - https://github.com/qos-ch/logback/commit/5f05041cba4c4ac0a62748c5c527a2da48999f2d
    - https://logback.qos.ch/news.html#1.3.15
    - https://logback.qos.ch/news.html#1.5.13
    - https://nvd.nist.gov/vuln/detail/CVE-2024-12801
    - https://www.cve.org/CVERecord?id=CVE-2024-12801
    PublishedDate: '2024-12-19T17:15:08.93Z'
    LastModifiedDate: '2025-01-03T14:15:24.5Z'
  - VulnerabilityID: CVE-2025-48734
    PkgName: commons-beanutils:commons-beanutils
    PkgPath: opt/dependency-check/lib/commons-beanutils-1.9.4.jar
    PkgIdentifier:
      PURL: pkg:maven/commons-beanutils/commons-beanutils@1.9.4
      UID: 87543632af4cfff7
    InstalledVersion: 1.9.4
    FixedVersion: 1.11.0
    Status: fixed
    Layer:
      Digest: sha256:c9aa02a097bcc2f3b15d59a445e2530cac3267443643501dd6062bd50a4b6afe
      DiffID: sha256:91d87e0c10c73b9d231ea18fd376e9b8495522228fc7c7d38461b41e40aab9e7
    SeveritySource: ghsa
    PrimaryURL: https://avd.aquasec.com/nvd/cve-2025-48734
    DataSource:
      ID: ghsa
      Name: GitHub Security Advisory Maven
      URL: https://github.com/advisories?query=type%3Areviewed+ecosystem%3Amaven
    Title: 'commons-beanutils: Apache Commons BeanUtils: PropertyUtilsBean does not suppresses an enum''s declaredClass property by default'
    Description: |-
      Improper Access Control vulnerability in Apache Commons.



      A special BeanIntrospector class was added in version 1.9.2. This can be used to stop attackers from using the declared class property of Java enum objects to get access to the classloader. However this protection was not enabled by default. PropertyUtilsBean (and consequently BeanUtilsBean) now disallows declared class level property access by default.





      Releases 1.11.0 and 2.0.0-M2 address a potential security issue when accessing enum properties in an uncontrolled way. If an application using Commons BeanUtils passes property paths from an external source directly to the getProperty() method of PropertyUtilsBean, an attacker can access the enum’s class loader via the “declaredClass” property available on all Java “enum” objects. Accessing the enum’s “declaredClass” allows remote attackers to access the ClassLoader and execute arbitrary code. The same issue exists with PropertyUtilsBean.getNestedProperty().
      Starting in versions 1.11.0 and 2.0.0-M2 a special BeanIntrospector suppresses the “declaredClass” property. Note that this new BeanIntrospector is enabled by default, but you can disable it to regain the old behavior; see section 2.5 of the user's guide and the unit tests.

      This issue affects Apache Commons BeanUtils 1.x before 1.11.0, and 2.x before 2.0.0-M2.Users of the artifact commons-beanutils:commons-beanutils

       1.x are recommended to upgrade to version 1.11.0, which fixes the issue.


      Users of the artifact org.apache.commons:commons-beanutils2

       2.x are recommended to upgrade to version 2.0.0-M2, which fixes the issue.
    Severity: HIGH
    CweIDs:
    - CWE-284
    VendorSeverity:
      alma: 3
      amazon: 3
      ghsa: 3
      oracle-oval: 3
      redhat: 3
    CVSS:
      ghsa:
        V3Vector: CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H
        V3Score: 8.8
      redhat:
        V3Vector: CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H
        V3Score: 8.8
    References:
    - http://www.openwall.com/lists/oss-security/2025/05/28/6
    - https://access.redhat.com/errata/RHSA-2025:9114
    - https://access.redhat.com/security/cve/CVE-2025-48734
    - https://bugzilla.redhat.com/2368956
    - https://errata.almalinux.org/9/ALSA-2025-9114.html
    - https://github.com/advisories/GHSA-wxr5-93ph-8wr9
    - https://github.com/apache/commons-beanutils
    - https://github.com/apache/commons-beanutils/commit/28ad955a1613ed5885870cc7da52093c1ce739dc
    - https://github.com/apache/commons-beanutils/commit/bd20740da25b69552ddef8523beec0837297eaf9
    - https://linux.oracle.com/cve/CVE-2025-48734.html
    - https://linux.oracle.com/errata/ELSA-2025-9318.html
    - https://lists.apache.org/thread/s0hb3jkfj5f3ryx6c57zqtfohb0of1g9
    - https://nvd.nist.gov/vuln/detail/CVE-2025-48734
    - https://www.cve.org/CVERecord?id=CVE-2025-48734
    - https://www.openwall.com/lists/oss-security/2025/05/28/6
    PublishedDate: '2025-05-28T14:15:34.07Z'
    LastModifiedDate: '2025-06-09T18:56:26.37Z'
  - VulnerabilityID: CVE-2025-48924
    PkgName: org.apache.commons:commons-lang3
    PkgPath: opt/dependency-check/lib/commons-lang3-3.17.0.jar
    PkgIdentifier:
      PURL: pkg:maven/org.apache.commons/commons-lang3@3.17.0
      UID: 185217fb76d896ee
    InstalledVersion: 3.17.0
    FixedVersion: 3.18.0
    Status: fixed
    Layer:
      Digest: sha256:c9aa02a097bcc2f3b15d59a445e2530cac3267443643501dd6062bd50a4b6afe
      DiffID: sha256:91d87e0c10c73b9d231ea18fd376e9b8495522228fc7c7d38461b41e40aab9e7
    SeveritySource: ghsa
    PrimaryURL: https://avd.aquasec.com/nvd/cve-2025-48924
    DataSource:
      ID: ghsa
      Name: GitHub Security Advisory Maven
      URL: https://github.com/advisories?query=type%3Areviewed+ecosystem%3Amaven
    Title: 'commons-lang/commons-lang: org.apache.commons/commons-lang3: Uncontrolled Recursion vulnerability in Apache Commons Lang'
    Description: "Uncontrolled Recursion vulnerability in Apache Commons Lang.\n\nThis issue affects Apache Commons Lang: Starting with\_commons-lang:commons-lang\_2.0 to 2.6, and, from org.apache.commons:commons-lang3 3.0 before\_3.18.0.\n\nThe methods ClassUtils.getClass(...) can throw\_StackOverflowError on very long inputs. Because an Error is usually not handled by applications and libraries, a \nStackOverflowError could\_cause an application to stop.\n\nUsers are recommended to upgrade to version 3.18.0, which fixes the issue."
    Severity: MEDIUM
    CweIDs:
    - CWE-674
    VendorSeverity:
      amazon: 1
      azure: 2
      ghsa: 2
      redhat: 1
    CVSS:
      ghsa:
        V3Vector: CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:N
        V3Score: 6.5
      redhat:
        V3Vector: CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L
        V3Score: 3.7
    References:
    - https://access.redhat.com/security/cve/CVE-2025-48924
    - https://github.com/apache/commons-lang
    - https://github.com/apache/commons-lang/commit/b424803abdb2bec818e4fbcb251ce031c22aca53
    - https://lists.apache.org/thread/bgv0lpswokgol11tloxnjfzdl7yrc1g1
    - https://nvd.nist.gov/vuln/detail/CVE-2025-48924
    - https://www.cve.org/CVERecord?id=CVE-2025-48924
    PublishedDate: '2025-07-11T15:15:24.347Z'
    LastModifiedDate: '2025-07-28T13:45:38.647Z'
  - VulnerabilityID: CVE-2025-27820
    PkgName: org.apache.httpcomponents.client5:httpclient5
    PkgPath: opt/dependency-check/lib/httpclient5-5.4.2.jar
    PkgIdentifier:
      PURL: pkg:maven/org.apache.httpcomponents.client5/httpclient5@5.4.2
      UID: 6ea72d58fcde5316
    InstalledVersion: 5.4.2
    FixedVersion: 5.4.3
    Status: fixed
    Layer:
      Digest: sha256:c9aa02a097bcc2f3b15d59a445e2530cac3267443643501dd6062bd50a4b6afe
      DiffID: sha256:91d87e0c10c73b9d231ea18fd376e9b8495522228fc7c7d38461b41e40aab9e7
    SeveritySource: ghsa
    PrimaryURL: https://avd.aquasec.com/nvd/cve-2025-27820
    DataSource:
      ID: ghsa
      Name: GitHub Security Advisory Maven
      URL: https://github.com/advisories?query=type%3Areviewed+ecosystem%3Amaven
    Title: 'org.apache.httpcomponents.client5/httpclient5: Apache HttpComponents: PSL (Public Suffix List) validation bypass'
    Description: A bug in PSL validation logic in Apache HttpClient 5.4.x disables domain checks, affecting cookie management and host name verification. Discovered by the Apache HttpClient team. Fixed in the 5.4.3 release
    Severity: HIGH
    CweIDs:
    - CWE-295
    VendorSeverity:
      ghsa: 3
      redhat: 2
    CVSS:
      ghsa:
        V3Vector: CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:H/A:N
        V3Score: 7.5
      redhat:
        V3Vector: CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:H/A:N
        V3Score: 6.5
    References:
    - https://access.redhat.com/security/cve/CVE-2025-27820
    - https://github.com/advisories/GHSA-73m2-qfq3-56cx
    - https://github.com/apache/httpcomponents-client
    - https://github.com/apache/httpcomponents-client/pull/574
    - https://github.com/apache/httpcomponents-client/pull/621
    - https://hc.apache.org/httpcomponents-client-5.4.x/index.html
    - https://lists.apache.org/thread/55xhs40ncqv97qvoocok44995xp5kqn8
    - https://nvd.nist.gov/vuln/detail/CVE-2025-27820
    - https://security.netapp.com/advisory/ntap-20250516-0003
    - https://security.netapp.com/advisory/ntap-20250516-0003/
    - https://www.cve.org/CVERecord?id=CVE-2025-27820
    PublishedDate: '2025-04-24T12:15:16.723Z'
    LastModifiedDate: '2025-07-16T14:48:52.213Z'
- Target: Python
  Class: lang-pkgs
  Type: python-pkg
- Target: usr/bin/grype
  Class: lang-pkgs
  Type: gobinary
  Vulnerabilities:
  - VulnerabilityID: CVE-2025-54388
    PkgID: github.com/docker/docker@v28.3.2+incompatible
    PkgName: github.com/docker/docker
    PkgIdentifier:
      PURL: pkg:golang/github.com/docker/docker@v28.3.2%2Bincompatible
      UID: 28dbb657111de354
    InstalledVersion: v28.3.2+incompatible
    FixedVersion: 28.3.3
    Status: fixed
    Layer:
      Digest: sha256:c9aa02a097bcc2f3b15d59a445e2530cac3267443643501dd6062bd50a4b6afe
      DiffID: sha256:91d87e0c10c73b9d231ea18fd376e9b8495522228fc7c7d38461b41e40aab9e7
    SeveritySource: ghsa
    PrimaryURL: https://avd.aquasec.com/nvd/cve-2025-54388
    DataSource:
      ID: ghsa
      Name: GitHub Security Advisory Go
      URL: https://github.com/advisories?query=type%3Areviewed+ecosystem%3Ago
    Title: 'github.com/moby/moby: Moby''s Firewalld reload makes container ports accessible'
    Description: Moby is an open source container framework developed by Docker Inc. that is distributed as Docker Engine, Mirantis Container Runtime, and various other downstream projects/products. In versions 28.2.0 through 28.3.2, when the firewalld service is reloaded it removes all iptables rules including those created by Docker. While Docker should automatically recreate these rules, versions before 28.3.3 fail to recreate the specific rules that block external access to containers. This means that after a firewalld reload, containers with ports published to localhost (like 127.0.0.1:8080) become accessible from remote machines that have network routing to the Docker bridge, even though they should only be accessible from the host itself. The vulnerability only affects explicitly published ports - unpublished ports remain protected. This issue is fixed in version 28.3.3.
    Severity: MEDIUM
    CweIDs:
    - CWE-909
    VendorSeverity:
      ghsa: 2
      nvd: 2
      redhat: 2
    CVSS:
      ghsa:
        V3Vector: CVSS:3.1/AV:A/AC:L/PR:N/UI:R/S:U/C:L/I:L/A:N
        V3Score: 4.6
      nvd:
        V3Vector: CVSS:3.1/AV:A/AC:L/PR:N/UI:R/S:U/C:L/I:L/A:N
        V3Score: 4.6
      redhat:
        V3Vector: CVSS:3.1/AV:A/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N
        V3Score: 5.2
    References:
    - https://access.redhat.com/security/cve/CVE-2025-54388
    - https://github.com/moby/moby
    - https://github.com/moby/moby/commit/bea959c7b793b32a893820b97c4eadc7c87fabb0
    - https://github.com/moby/moby/pull/50506
    - https://github.com/moby/moby/security/advisories/GHSA-x4rx-4gw3-53p4
    - https://nvd.nist.gov/vuln/detail/CVE-2025-54388
    - https://www.cve.org/CVERecord?id=CVE-2025-54388
    PublishedDate: '2025-07-30T14:15:28.693Z'
    LastModifiedDate: '2025-09-08T16:34:31.63Z'
  - VulnerabilityID: GHSA-2464-8j7c-4cjm
    PkgID: github.com/go-viper/mapstructure/v2@v2.3.0
    PkgName: github.com/go-viper/mapstructure/v2
    PkgIdentifier:
      PURL: pkg:golang/github.com/go-viper/mapstructure/v2@v2.3.0
      UID: a931d078d7a7a331
    InstalledVersion: v2.3.0
    FixedVersion: 2.4.0
    Status: fixed
    Layer:
      Digest: sha256:c9aa02a097bcc2f3b15d59a445e2530cac3267443643501dd6062bd50a4b6afe
      DiffID: sha256:91d87e0c10c73b9d231ea18fd376e9b8495522228fc7c7d38461b41e40aab9e7
    SeveritySource: ghsa
    PrimaryURL: https://github.com/advisories/GHSA-2464-8j7c-4cjm
    DataSource:
      ID: ghsa
      Name: GitHub Security Advisory Go
      URL: https://github.com/advisories?query=type%3Areviewed+ecosystem%3Ago
    Title: go-viper's mapstructure May Leak Sensitive Information in Logs When Processing Malformed Data
    Description: "### Summary\n\nUse of this library in a security-critical context may result in leaking sensitive information, if used to process sensitive fields.\n\n### Details\n\nOpenBao (and presumably HashiCorp Vault) have surfaced error messages from `mapstructure` as follows:\n\nhttps://github.com/openbao/openbao/blob/98c3a59c040efca724353ca46ca79bd5cdbab920/sdk/framework/field_data.go#L43-L50\n\n```go\n\t\t\t_, _, err := d.getPrimitive(field, schema)\n\t\t\tif err != nil {\n\t\t\t\treturn fmt.Errorf(\"error converting input for field %q: %w\", field, err)\n\t\t\t}\n```\n\nwhere this calls `mapstructure.WeakDecode(...)`: https://github.com/openbao/openbao/blob/98c3a59c040efca724353ca46ca79bd5cdbab920/sdk/framework/field_data.go#L181-L193\n\n```go\n\nfunc (d *FieldData) getPrimitive(k string, schema *FieldSchema) (interface{}, bool, error) {\n\traw, ok := d.Raw[k]\n\tif !ok {\n\t\treturn nil, false, nil\n\t}\n\n\tswitch t := schema.Type; t {\n\tcase TypeBool:\n\t\tvar result bool\n\t\tif err := mapstructure.WeakDecode(raw, &result); err != nil {\n\t\t\treturn nil, false, err\n\t\t}\n\t\treturn result, true, nil\n```\n\nNotably, `WeakDecode(...)` eventually calls one of the decode helpers, which surfaces the original value via `strconv` helpers:\n\nhttps://github.com/go-viper/mapstructure/blob/8c61ec1924fcfa522f9fc6b4618c672db61d1a38/mapstructure.go#L720-L727\n\nhttps://github.com/go-viper/mapstructure/blob/8c61ec1924fcfa522f9fc6b4618c672db61d1a38/mapstructure.go#L791-L798\n\nhttps://github.com/go-viper/mapstructure/blob/8c61ec1924fcfa522f9fc6b4618c672db61d1a38/decode_hooks.go#L180\n\n& more. These are different code paths than are fixed in the previous iteration at https://github.com/go-viper/mapstructure/security/advisories/GHSA-fv92-fjc5-jj9h.\n\n### PoC\n\nTo reproduce with OpenBao:\n\n```\n$ podman run --pull=always -p 8300:8300 openbao/openbao:latest server -dev -dev-root-token-id=root -dev-listen-address=0.0.0.0:8300\n```\n\nand in a new tab:\n\n```\n$ BAO_TOKEN=root BAO_ADDR=http://localhost:8300 bao auth enable userpass\nSuccess! Enabled userpass auth method at: userpass/\n$ curl -X PUT -H \"X-Vault-Request: true\" -H \"X-Vault-Token: root\" -d '{\"ttl\":\"asdf\"}' \"http://localhost:8200/v1/auth/userpass/users/asdf\"\n\n--> server logs:\n\n2025-06-25T21:32:25.101-0500 [ERROR] core: failed to run existence check: error=\"error converting input for field \\\"ttl\\\": time: invalid duration \\\"asdf\\\"\"\n```\n\n### Impact\n\nThis is an information disclosure bug with little mitigation. See https://discuss.hashicorp.com/t/hcsec-2025-09-vault-may-expose-sensitive-information-in-error-logs-when-processing-malformed-data-with-the-kv-v2-plugin/74717 for a previous version. That version was fixed, but this is in the second part of that error message (starting at `'' expected a map, got 'string'` -- when the field type is `string` and a `map` is provided, we see the above information leak -- the previous example had a `map` type field with a `string` value provided).\n\nThis was rated 4.5 Medium by HashiCorp in the past iteration."
    Severity: MEDIUM
    VendorSeverity:
      ghsa: 2
    CVSS:
      ghsa:
        V3Vector: CVSS:3.1/AV:N/AC:H/PR:N/UI:R/S:U/C:H/I:N/A:N
        V3Score: 5.3
    References:
    - https://github.com/go-viper/mapstructure
    - https://github.com/go-viper/mapstructure/commit/742921c9ba2854d27baa64272487fc5075d2c39c
    - https://github.com/go-viper/mapstructure/security/advisories/GHSA-2464-8j7c-4cjm
    - https://pkg.go.dev/vuln/GO-2025-3900
    PublishedDate: '2025-08-21T14:37:19Z'
    LastModifiedDate: '2025-08-29T20:44:25Z'
  - VulnerabilityID: CVE-2025-8959
    PkgID: github.com/hashicorp/go-getter@v1.7.8
    PkgName: github.com/hashicorp/go-getter
    PkgIdentifier:
      PURL: pkg:golang/github.com/hashicorp/go-getter@v1.7.8
      UID: b6ec2c2507307ba
    InstalledVersion: v1.7.8
    FixedVersion: 1.7.9
    Status: fixed
    Layer:
      Digest: sha256:c9aa02a097bcc2f3b15d59a445e2530cac3267443643501dd6062bd50a4b6afe
      DiffID: sha256:91d87e0c10c73b9d231ea18fd376e9b8495522228fc7c7d38461b41e40aab9e7
    SeveritySource: ghsa
    PrimaryURL: https://avd.aquasec.com/nvd/cve-2025-8959
    DataSource:
      ID: ghsa
      Name: GitHub Security Advisory Go
      URL: https://github.com/advisories?query=type%3Areviewed+ecosystem%3Ago
    Title: 'github.com/hashicorp/go-getter: HashiCorp go-getter Arbitrary File Read'
    Description: HashiCorp's go-getter library subdirectory download feature is vulnerable to symlink attacks leading to unauthorized read access beyond the designated directory boundaries. This vulnerability, identified as CVE-2025-8959, is fixed in go-getter 1.7.9.
    Severity: HIGH
    CweIDs:
    - CWE-59
    VendorSeverity:
      ghsa: 3
      redhat: 3
    CVSS:
      ghsa:
        V3Vector: CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N
        V3Score: 7.5
      redhat:
        V3Vector: CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N
        V3Score: 7.5
    References:
    - https://access.redhat.com/security/cve/CVE-2025-8959
    - https://discuss.hashicorp.com/t/hcsec-2025-23-hashicorp-go-getter-vulnerable-to-arbitrary-read-through-symlink-attack/76242
    - https://github.com/hashicorp/go-getter
    - https://github.com/hashicorp/go-getter/commit/87541b2501c00df5eaedea6acc61a2a4a4efa5b7
    - https://github.com/hashicorp/go-getter/pull/540
    - https://nvd.nist.gov/vuln/detail/CVE-2025-8959
    - https://pkg.go.dev/vuln/GO-2025-3892
    - https://www.cve.org/CVERecord?id=CVE-2025-8959
    PublishedDate: '2025-08-15T21:15:37.347Z'
    LastModifiedDate: '2025-08-18T20:16:28.75Z'
  - VulnerabilityID: CVE-2025-58058
    PkgID: github.com/ulikunitz/xz@v0.5.12
    PkgName: github.com/ulikunitz/xz
    PkgIdentifier:
      PURL: pkg:golang/github.com/ulikunitz/xz@v0.5.12
      UID: 84006b24457bf0c5
    InstalledVersion: v0.5.12
    FixedVersion: 0.5.15
    Status: fixed
    Layer:
      Digest: sha256:c9aa02a097bcc2f3b15d59a445e2530cac3267443643501dd6062bd50a4b6afe
      DiffID: sha256:91d87e0c10c73b9d231ea18fd376e9b8495522228fc7c7d38461b41e40aab9e7
    SeveritySource: ghsa
    PrimaryURL: https://avd.aquasec.com/nvd/cve-2025-58058
    DataSource:
      ID: ghsa
      Name: GitHub Security Advisory Go
      URL: https://github.com/advisories?query=type%3Areviewed+ecosystem%3Ago
    Title: 'github.com/ulikunitz/xz: github.com/ulikunitz/xz leaks memory'
    Description: xz is a pure golang package for reading and writing xz-compressed files. Prior to version 0.5.14, it is possible to put data in front of an LZMA-encoded byte stream without detecting the situation while reading the header. This can lead to increased memory consumption because the current implementation allocates the full decoding buffer directly after reading the header. The LZMA header doesn't include a magic number or has a checksum to detect such an issue according to the specification. Note that the code recognizes the issue later while reading the stream, but at this time the memory allocation has already been done. This issue has been patched in version 0.5.14.
    Severity: MEDIUM
    CweIDs:
    - CWE-770
    VendorSeverity:
      ghsa: 2
      redhat: 2
    CVSS:
      ghsa:
        V3Vector: CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L
        V3Score: 5.3
      redhat:
        V3Vector: CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L
        V3Score: 5.3
    References:
    - https://access.redhat.com/security/cve/CVE-2025-58058
    - https://github.com/ulikunitz/xz
    - https://github.com/ulikunitz/xz/commit/88ddf1d0d98d688db65de034f48960b2760d2ae2
    - https://github.com/ulikunitz/xz/security/advisories/GHSA-jc7w-c686-c4v9
    - https://nvd.nist.gov/vuln/detail/CVE-2025-58058
    - https://www.cve.org/CVERecord?id=CVE-2025-58058
    PublishedDate: '2025-08-28T22:15:32.577Z'
    LastModifiedDate: '2025-08-29T16:24:29.73Z'
  - VulnerabilityID: CVE-2025-47907
    PkgID: stdlib@v1.24.4
    PkgName: stdlib
    PkgIdentifier:
      PURL: pkg:golang/stdlib@v1.24.4
      UID: f1435be1373e471b
    InstalledVersion: v1.24.4
    FixedVersion: 1.23.12, 1.24.6
    Status: fixed
    Layer:
      Digest: sha256:c9aa02a097bcc2f3b15d59a445e2530cac3267443643501dd6062bd50a4b6afe
      DiffID: sha256:91d87e0c10c73b9d231ea18fd376e9b8495522228fc7c7d38461b41e40aab9e7
    PrimaryURL: https://avd.aquasec.com/nvd/cve-2025-47907
    DataSource:
      ID: govulndb
      Name: The Go Vulnerability Database
      URL: https://pkg.go.dev/vuln/
    Title: 'database/sql: Postgres Scan Race Condition'
    Description: Cancelling a query (e.g. by cancelling the context passed to one of the query methods) during a call to the Scan method of the returned Rows can result in unexpected results if other queries are being made in parallel. This can result in a race condition that may overwrite the expected results with those of another query, causing the call to Scan to return either unexpected results from the other query or an error.
    Severity: HIGH
    VendorSeverity:
      amazon: 3
      azure: 3
      bitnami: 3
      cbl-mariner: 3
      redhat: 2
    CVSS:
      bitnami:
        V3Vector: CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:L/A:L
        V3Score: 7
      redhat:
        V3Vector: CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:L/A:L
        V3Score: 7
    References:
    - https://access.redhat.com/security/cve/CVE-2025-47907
    - https://go.dev/cl/693735
    - https://go.dev/issue/74831
    - https://groups.google.com/g/golang-announce/c/x5MKroML2yM
    - https://nvd.nist.gov/vuln/detail/CVE-2025-47907
    - https://pkg.go.dev/vuln/GO-2025-3849
    - https://www.cve.org/CVERecord?id=CVE-2025-47907
    PublishedDate: '2025-08-07T16:15:30.357Z'
    LastModifiedDate: '2025-08-07T21:26:37.453Z'
- Target: usr/bin/syft
  Class: lang-pkgs
  Type: gobinary
  Vulnerabilities:
  - VulnerabilityID: CVE-2025-54388
    PkgID: github.com/docker/docker@v28.2.2+incompatible
    PkgName: github.com/docker/docker
    PkgIdentifier:
      PURL: pkg:golang/github.com/docker/docker@v28.2.2%2Bincompatible
      UID: 3c7ce1b3f4e63f81
    InstalledVersion: v28.2.2+incompatible
    FixedVersion: 28.3.3
    Status: fixed
    Layer:
      Digest: sha256:c9aa02a097bcc2f3b15d59a445e2530cac3267443643501dd6062bd50a4b6afe
      DiffID: sha256:91d87e0c10c73b9d231ea18fd376e9b8495522228fc7c7d38461b41e40aab9e7
    SeveritySource: ghsa
    PrimaryURL: https://avd.aquasec.com/nvd/cve-2025-54388
    DataSource:
      ID: ghsa
      Name: GitHub Security Advisory Go
      URL: https://github.com/advisories?query=type%3Areviewed+ecosystem%3Ago
    Title: 'github.com/moby/moby: Moby''s Firewalld reload makes container ports accessible'
    Description: Moby is an open source container framework developed by Docker Inc. that is distributed as Docker Engine, Mirantis Container Runtime, and various other downstream projects/products. In versions 28.2.0 through 28.3.2, when the firewalld service is reloaded it removes all iptables rules including those created by Docker. While Docker should automatically recreate these rules, versions before 28.3.3 fail to recreate the specific rules that block external access to containers. This means that after a firewalld reload, containers with ports published to localhost (like 127.0.0.1:8080) become accessible from remote machines that have network routing to the Docker bridge, even though they should only be accessible from the host itself. The vulnerability only affects explicitly published ports - unpublished ports remain protected. This issue is fixed in version 28.3.3.
    Severity: MEDIUM
    CweIDs:
    - CWE-909
    VendorSeverity:
      ghsa: 2
      nvd: 2
      redhat: 2
    CVSS:
      ghsa:
        V3Vector: CVSS:3.1/AV:A/AC:L/PR:N/UI:R/S:U/C:L/I:L/A:N
        V3Score: 4.6
      nvd:
        V3Vector: CVSS:3.1/AV:A/AC:L/PR:N/UI:R/S:U/C:L/I:L/A:N
        V3Score: 4.6
      redhat:
        V3Vector: CVSS:3.1/AV:A/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N
        V3Score: 5.2
    References:
    - https://access.redhat.com/security/cve/CVE-2025-54388
    - https://github.com/moby/moby
    - https://github.com/moby/moby/commit/bea959c7b793b32a893820b97c4eadc7c87fabb0
    - https://github.com/moby/moby/pull/50506
    - https://github.com/moby/moby/security/advisories/GHSA-x4rx-4gw3-53p4
    - https://nvd.nist.gov/vuln/detail/CVE-2025-54388
    - https://www.cve.org/CVERecord?id=CVE-2025-54388
    PublishedDate: '2025-07-30T14:15:28.693Z'
    LastModifiedDate: '2025-09-08T16:34:31.63Z'
  - VulnerabilityID: GHSA-2464-8j7c-4cjm
    PkgID: github.com/go-viper/mapstructure/v2@v2.3.0
    PkgName: github.com/go-viper/mapstructure/v2
    PkgIdentifier:
      PURL: pkg:golang/github.com/go-viper/mapstructure/v2@v2.3.0
      UID: 6850aac4a828ca15
    InstalledVersion: v2.3.0
    FixedVersion: 2.4.0
    Status: fixed
    Layer:
      Digest: sha256:c9aa02a097bcc2f3b15d59a445e2530cac3267443643501dd6062bd50a4b6afe
      DiffID: sha256:91d87e0c10c73b9d231ea18fd376e9b8495522228fc7c7d38461b41e40aab9e7
    SeveritySource: ghsa
    PrimaryURL: https://github.com/advisories/GHSA-2464-8j7c-4cjm
    DataSource:
      ID: ghsa
      Name: GitHub Security Advisory Go
      URL: https://github.com/advisories?query=type%3Areviewed+ecosystem%3Ago
    Title: go-viper's mapstructure May Leak Sensitive Information in Logs When Processing Malformed Data
    Description: "### Summary\n\nUse of this library in a security-critical context may result in leaking sensitive information, if used to process sensitive fields.\n\n### Details\n\nOpenBao (and presumably HashiCorp Vault) have surfaced error messages from `mapstructure` as follows:\n\nhttps://github.com/openbao/openbao/blob/98c3a59c040efca724353ca46ca79bd5cdbab920/sdk/framework/field_data.go#L43-L50\n\n```go\n\t\t\t_, _, err := d.getPrimitive(field, schema)\n\t\t\tif err != nil {\n\t\t\t\treturn fmt.Errorf(\"error converting input for field %q: %w\", field, err)\n\t\t\t}\n```\n\nwhere this calls `mapstructure.WeakDecode(...)`: https://github.com/openbao/openbao/blob/98c3a59c040efca724353ca46ca79bd5cdbab920/sdk/framework/field_data.go#L181-L193\n\n```go\n\nfunc (d *FieldData) getPrimitive(k string, schema *FieldSchema) (interface{}, bool, error) {\n\traw, ok := d.Raw[k]\n\tif !ok {\n\t\treturn nil, false, nil\n\t}\n\n\tswitch t := schema.Type; t {\n\tcase TypeBool:\n\t\tvar result bool\n\t\tif err := mapstructure.WeakDecode(raw, &result); err != nil {\n\t\t\treturn nil, false, err\n\t\t}\n\t\treturn result, true, nil\n```\n\nNotably, `WeakDecode(...)` eventually calls one of the decode helpers, which surfaces the original value via `strconv` helpers:\n\nhttps://github.com/go-viper/mapstructure/blob/8c61ec1924fcfa522f9fc6b4618c672db61d1a38/mapstructure.go#L720-L727\n\nhttps://github.com/go-viper/mapstructure/blob/8c61ec1924fcfa522f9fc6b4618c672db61d1a38/mapstructure.go#L791-L798\n\nhttps://github.com/go-viper/mapstructure/blob/8c61ec1924fcfa522f9fc6b4618c672db61d1a38/decode_hooks.go#L180\n\n& more. These are different code paths than are fixed in the previous iteration at https://github.com/go-viper/mapstructure/security/advisories/GHSA-fv92-fjc5-jj9h.\n\n### PoC\n\nTo reproduce with OpenBao:\n\n```\n$ podman run --pull=always -p 8300:8300 openbao/openbao:latest server -dev -dev-root-token-id=root -dev-listen-address=0.0.0.0:8300\n```\n\nand in a new tab:\n\n```\n$ BAO_TOKEN=root BAO_ADDR=http://localhost:8300 bao auth enable userpass\nSuccess! Enabled userpass auth method at: userpass/\n$ curl -X PUT -H \"X-Vault-Request: true\" -H \"X-Vault-Token: root\" -d '{\"ttl\":\"asdf\"}' \"http://localhost:8200/v1/auth/userpass/users/asdf\"\n\n--> server logs:\n\n2025-06-25T21:32:25.101-0500 [ERROR] core: failed to run existence check: error=\"error converting input for field \\\"ttl\\\": time: invalid duration \\\"asdf\\\"\"\n```\n\n### Impact\n\nThis is an information disclosure bug with little mitigation. See https://discuss.hashicorp.com/t/hcsec-2025-09-vault-may-expose-sensitive-information-in-error-logs-when-processing-malformed-data-with-the-kv-v2-plugin/74717 for a previous version. That version was fixed, but this is in the second part of that error message (starting at `'' expected a map, got 'string'` -- when the field type is `string` and a `map` is provided, we see the above information leak -- the previous example had a `map` type field with a `string` value provided).\n\nThis was rated 4.5 Medium by HashiCorp in the past iteration."
    Severity: MEDIUM
    VendorSeverity:
      ghsa: 2
    CVSS:
      ghsa:
        V3Vector: CVSS:3.1/AV:N/AC:H/PR:N/UI:R/S:U/C:H/I:N/A:N
        V3Score: 5.3
    References:
    - https://github.com/go-viper/mapstructure
    - https://github.com/go-viper/mapstructure/commit/742921c9ba2854d27baa64272487fc5075d2c39c
    - https://github.com/go-viper/mapstructure/security/advisories/GHSA-2464-8j7c-4cjm
    - https://pkg.go.dev/vuln/GO-2025-3900
    PublishedDate: '2025-08-21T14:37:19Z'
    LastModifiedDate: '2025-08-29T20:44:25Z'
  - VulnerabilityID: CVE-2025-8959
    PkgID: github.com/hashicorp/go-getter@v1.7.8
    PkgName: github.com/hashicorp/go-getter
    PkgIdentifier:
      PURL: pkg:golang/github.com/hashicorp/go-getter@v1.7.8
      UID: 74eb5b07ca4d0ef6
    InstalledVersion: v1.7.8
    FixedVersion: 1.7.9
    Status: fixed
    Layer:
      Digest: sha256:c9aa02a097bcc2f3b15d59a445e2530cac3267443643501dd6062bd50a4b6afe
      DiffID: sha256:91d87e0c10c73b9d231ea18fd376e9b8495522228fc7c7d38461b41e40aab9e7
    SeveritySource: ghsa
    PrimaryURL: https://avd.aquasec.com/nvd/cve-2025-8959
    DataSource:
      ID: ghsa
      Name: GitHub Security Advisory Go
      URL: https://github.com/advisories?query=type%3Areviewed+ecosystem%3Ago
    Title: 'github.com/hashicorp/go-getter: HashiCorp go-getter Arbitrary File Read'
    Description: HashiCorp's go-getter library subdirectory download feature is vulnerable to symlink attacks leading to unauthorized read access beyond the designated directory boundaries. This vulnerability, identified as CVE-2025-8959, is fixed in go-getter 1.7.9.
    Severity: HIGH
    CweIDs:
    - CWE-59
    VendorSeverity:
      ghsa: 3
      redhat: 3
    CVSS:
      ghsa:
        V3Vector: CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N
        V3Score: 7.5
      redhat:
        V3Vector: CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N
        V3Score: 7.5
    References:
    - https://access.redhat.com/security/cve/CVE-2025-8959
    - https://discuss.hashicorp.com/t/hcsec-2025-23-hashicorp-go-getter-vulnerable-to-arbitrary-read-through-symlink-attack/76242
    - https://github.com/hashicorp/go-getter
    - https://github.com/hashicorp/go-getter/commit/87541b2501c00df5eaedea6acc61a2a4a4efa5b7
    - https://github.com/hashicorp/go-getter/pull/540
    - https://nvd.nist.gov/vuln/detail/CVE-2025-8959
    - https://pkg.go.dev/vuln/GO-2025-3892
    - https://www.cve.org/CVERecord?id=CVE-2025-8959
    PublishedDate: '2025-08-15T21:15:37.347Z'
    LastModifiedDate: '2025-08-18T20:16:28.75Z'
  - VulnerabilityID: CVE-2025-58058
    PkgID: github.com/ulikunitz/xz@v0.5.12
    PkgName: github.com/ulikunitz/xz
    PkgIdentifier:
      PURL: pkg:golang/github.com/ulikunitz/xz@v0.5.12
      UID: dab39ef52e0395fd
    InstalledVersion: v0.5.12
    FixedVersion: 0.5.15
    Status: fixed
    Layer:
      Digest: sha256:c9aa02a097bcc2f3b15d59a445e2530cac3267443643501dd6062bd50a4b6afe
      DiffID: sha256:91d87e0c10c73b9d231ea18fd376e9b8495522228fc7c7d38461b41e40aab9e7
    SeveritySource: ghsa
    PrimaryURL: https://avd.aquasec.com/nvd/cve-2025-58058
    DataSource:
      ID: ghsa
      Name: GitHub Security Advisory Go
      URL: https://github.com/advisories?query=type%3Areviewed+ecosystem%3Ago
    Title: 'github.com/ulikunitz/xz: github.com/ulikunitz/xz leaks memory'
    Description: xz is a pure golang package for reading and writing xz-compressed files. Prior to version 0.5.14, it is possible to put data in front of an LZMA-encoded byte stream without detecting the situation while reading the header. This can lead to increased memory consumption because the current implementation allocates the full decoding buffer directly after reading the header. The LZMA header doesn't include a magic number or has a checksum to detect such an issue according to the specification. Note that the code recognizes the issue later while reading the stream, but at this time the memory allocation has already been done. This issue has been patched in version 0.5.14.
    Severity: MEDIUM
    CweIDs:
    - CWE-770
    VendorSeverity:
      ghsa: 2
      redhat: 2
    CVSS:
      ghsa:
        V3Vector: CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L
        V3Score: 5.3
      redhat:
        V3Vector: CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L
        V3Score: 5.3
    References:
    - https://access.redhat.com/security/cve/CVE-2025-58058
    - https://github.com/ulikunitz/xz
    - https://github.com/ulikunitz/xz/commit/88ddf1d0d98d688db65de034f48960b2760d2ae2
    - https://github.com/ulikunitz/xz/security/advisories/GHSA-jc7w-c686-c4v9
    - https://nvd.nist.gov/vuln/detail/CVE-2025-58058
    - https://www.cve.org/CVERecord?id=CVE-2025-58058
    PublishedDate: '2025-08-28T22:15:32.577Z'
    LastModifiedDate: '2025-08-29T16:24:29.73Z'
  - VulnerabilityID: CVE-2025-47907
    PkgID: stdlib@v1.24.4
    PkgName: stdlib
    PkgIdentifier:
      PURL: pkg:golang/stdlib@v1.24.4
      UID: ebfdcee22f3690eb
    InstalledVersion: v1.24.4
    FixedVersion: 1.23.12, 1.24.6
    Status: fixed
    Layer:
      Digest: sha256:c9aa02a097bcc2f3b15d59a445e2530cac3267443643501dd6062bd50a4b6afe
      DiffID: sha256:91d87e0c10c73b9d231ea18fd376e9b8495522228fc7c7d38461b41e40aab9e7
    PrimaryURL: https://avd.aquasec.com/nvd/cve-2025-47907
    DataSource:
      ID: govulndb
      Name: The Go Vulnerability Database
      URL: https://pkg.go.dev/vuln/
    Title: 'database/sql: Postgres Scan Race Condition'
    Description: Cancelling a query (e.g. by cancelling the context passed to one of the query methods) during a call to the Scan method of the returned Rows can result in unexpected results if other queries are being made in parallel. This can result in a race condition that may overwrite the expected results with those of another query, causing the call to Scan to return either unexpected results from the other query or an error.
    Severity: HIGH
    VendorSeverity:
      amazon: 3
      azure: 3
      bitnami: 3
      cbl-mariner: 3
      redhat: 2
    CVSS:
      bitnami:
        V3Vector: CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:L/A:L
        V3Score: 7
      redhat:
        V3Vector: CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:L/A:L
        V3Score: 7
    References:
    - https://access.redhat.com/security/cve/CVE-2025-47907
    - https://go.dev/cl/693735
    - https://go.dev/issue/74831
    - https://groups.google.com/g/golang-announce/c/x5MKroML2yM
    - https://nvd.nist.gov/vuln/detail/CVE-2025-47907
    - https://pkg.go.dev/vuln/GO-2025-3849
    - https://www.cve.org/CVERecord?id=CVE-2025-47907
    PublishedDate: '2025-08-07T16:15:30.357Z'
    LastModifiedDate: '2025-08-07T21:26:37.453Z'
- Target: usr/bin/trivy
  Class: lang-pkgs
  Type: gobinary
  Vulnerabilities:
  - VulnerabilityID: CVE-2025-54388
    PkgID: github.com/docker/docker@v28.2.2+incompatible
    PkgName: github.com/docker/docker
    PkgIdentifier:
      PURL: pkg:golang/github.com/docker/docker@v28.2.2%2Bincompatible
      UID: 4efd45e96b63ab87
    InstalledVersion: v28.2.2+incompatible
    FixedVersion: 28.3.3
    Status: fixed
    Layer:
      Digest: sha256:c9aa02a097bcc2f3b15d59a445e2530cac3267443643501dd6062bd50a4b6afe
      DiffID: sha256:91d87e0c10c73b9d231ea18fd376e9b8495522228fc7c7d38461b41e40aab9e7
    SeveritySource: ghsa
    PrimaryURL: https://avd.aquasec.com/nvd/cve-2025-54388
    DataSource:
      ID: ghsa
      Name: GitHub Security Advisory Go
      URL: https://github.com/advisories?query=type%3Areviewed+ecosystem%3Ago
    Title: 'github.com/moby/moby: Moby''s Firewalld reload makes container ports accessible'
    Description: Moby is an open source container framework developed by Docker Inc. that is distributed as Docker Engine, Mirantis Container Runtime, and various other downstream projects/products. In versions 28.2.0 through 28.3.2, when the firewalld service is reloaded it removes all iptables rules including those created by Docker. While Docker should automatically recreate these rules, versions before 28.3.3 fail to recreate the specific rules that block external access to containers. This means that after a firewalld reload, containers with ports published to localhost (like 127.0.0.1:8080) become accessible from remote machines that have network routing to the Docker bridge, even though they should only be accessible from the host itself. The vulnerability only affects explicitly published ports - unpublished ports remain protected. This issue is fixed in version 28.3.3.
    Severity: MEDIUM
    CweIDs:
    - CWE-909
    VendorSeverity:
      ghsa: 2
      nvd: 2
      redhat: 2
    CVSS:
      ghsa:
        V3Vector: CVSS:3.1/AV:A/AC:L/PR:N/UI:R/S:U/C:L/I:L/A:N
        V3Score: 4.6
      nvd:
        V3Vector: CVSS:3.1/AV:A/AC:L/PR:N/UI:R/S:U/C:L/I:L/A:N
        V3Score: 4.6
      redhat:
        V3Vector: CVSS:3.1/AV:A/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N
        V3Score: 5.2
    References:
    - https://access.redhat.com/security/cve/CVE-2025-54388
    - https://github.com/moby/moby
    - https://github.com/moby/moby/commit/bea959c7b793b32a893820b97c4eadc7c87fabb0
    - https://github.com/moby/moby/pull/50506
    - https://github.com/moby/moby/security/advisories/GHSA-x4rx-4gw3-53p4
    - https://nvd.nist.gov/vuln/detail/CVE-2025-54388
    - https://www.cve.org/CVERecord?id=CVE-2025-54388
    PublishedDate: '2025-07-30T14:15:28.693Z'
    LastModifiedDate: '2025-09-08T16:34:31.63Z'
  - VulnerabilityID: GHSA-2464-8j7c-4cjm
    PkgID: github.com/go-viper/mapstructure/v2@v2.3.0
    PkgName: github.com/go-viper/mapstructure/v2
    PkgIdentifier:
      PURL: pkg:golang/github.com/go-viper/mapstructure/v2@v2.3.0
      UID: 882349339d250e37
    InstalledVersion: v2.3.0
    FixedVersion: 2.4.0
    Status: fixed
    Layer:
      Digest: sha256:c9aa02a097bcc2f3b15d59a445e2530cac3267443643501dd6062bd50a4b6afe
      DiffID: sha256:91d87e0c10c73b9d231ea18fd376e9b8495522228fc7c7d38461b41e40aab9e7
    SeveritySource: ghsa
    PrimaryURL: https://github.com/advisories/GHSA-2464-8j7c-4cjm
    DataSource:
      ID: ghsa
      Name: GitHub Security Advisory Go
      URL: https://github.com/advisories?query=type%3Areviewed+ecosystem%3Ago
    Title: go-viper's mapstructure May Leak Sensitive Information in Logs When Processing Malformed Data
    Description: "### Summary\n\nUse of this library in a security-critical context may result in leaking sensitive information, if used to process sensitive fields.\n\n### Details\n\nOpenBao (and presumably HashiCorp Vault) have surfaced error messages from `mapstructure` as follows:\n\nhttps://github.com/openbao/openbao/blob/98c3a59c040efca724353ca46ca79bd5cdbab920/sdk/framework/field_data.go#L43-L50\n\n```go\n\t\t\t_, _, err := d.getPrimitive(field, schema)\n\t\t\tif err != nil {\n\t\t\t\treturn fmt.Errorf(\"error converting input for field %q: %w\", field, err)\n\t\t\t}\n```\n\nwhere this calls `mapstructure.WeakDecode(...)`: https://github.com/openbao/openbao/blob/98c3a59c040efca724353ca46ca79bd5cdbab920/sdk/framework/field_data.go#L181-L193\n\n```go\n\nfunc (d *FieldData) getPrimitive(k string, schema *FieldSchema) (interface{}, bool, error) {\n\traw, ok := d.Raw[k]\n\tif !ok {\n\t\treturn nil, false, nil\n\t}\n\n\tswitch t := schema.Type; t {\n\tcase TypeBool:\n\t\tvar result bool\n\t\tif err := mapstructure.WeakDecode(raw, &result); err != nil {\n\t\t\treturn nil, false, err\n\t\t}\n\t\treturn result, true, nil\n```\n\nNotably, `WeakDecode(...)` eventually calls one of the decode helpers, which surfaces the original value via `strconv` helpers:\n\nhttps://github.com/go-viper/mapstructure/blob/8c61ec1924fcfa522f9fc6b4618c672db61d1a38/mapstructure.go#L720-L727\n\nhttps://github.com/go-viper/mapstructure/blob/8c61ec1924fcfa522f9fc6b4618c672db61d1a38/mapstructure.go#L791-L798\n\nhttps://github.com/go-viper/mapstructure/blob/8c61ec1924fcfa522f9fc6b4618c672db61d1a38/decode_hooks.go#L180\n\n& more. These are different code paths than are fixed in the previous iteration at https://github.com/go-viper/mapstructure/security/advisories/GHSA-fv92-fjc5-jj9h.\n\n### PoC\n\nTo reproduce with OpenBao:\n\n```\n$ podman run --pull=always -p 8300:8300 openbao/openbao:latest server -dev -dev-root-token-id=root -dev-listen-address=0.0.0.0:8300\n```\n\nand in a new tab:\n\n```\n$ BAO_TOKEN=root BAO_ADDR=http://localhost:8300 bao auth enable userpass\nSuccess! Enabled userpass auth method at: userpass/\n$ curl -X PUT -H \"X-Vault-Request: true\" -H \"X-Vault-Token: root\" -d '{\"ttl\":\"asdf\"}' \"http://localhost:8200/v1/auth/userpass/users/asdf\"\n\n--> server logs:\n\n2025-06-25T21:32:25.101-0500 [ERROR] core: failed to run existence check: error=\"error converting input for field \\\"ttl\\\": time: invalid duration \\\"asdf\\\"\"\n```\n\n### Impact\n\nThis is an information disclosure bug with little mitigation. See https://discuss.hashicorp.com/t/hcsec-2025-09-vault-may-expose-sensitive-information-in-error-logs-when-processing-malformed-data-with-the-kv-v2-plugin/74717 for a previous version. That version was fixed, but this is in the second part of that error message (starting at `'' expected a map, got 'string'` -- when the field type is `string` and a `map` is provided, we see the above information leak -- the previous example had a `map` type field with a `string` value provided).\n\nThis was rated 4.5 Medium by HashiCorp in the past iteration."
    Severity: MEDIUM
    VendorSeverity:
      ghsa: 2
    CVSS:
      ghsa:
        V3Vector: CVSS:3.1/AV:N/AC:H/PR:N/UI:R/S:U/C:H/I:N/A:N
        V3Score: 5.3
    References:
    - https://github.com/go-viper/mapstructure
    - https://github.com/go-viper/mapstructure/commit/742921c9ba2854d27baa64272487fc5075d2c39c
    - https://github.com/go-viper/mapstructure/security/advisories/GHSA-2464-8j7c-4cjm
    - https://pkg.go.dev/vuln/GO-2025-3900
    PublishedDate: '2025-08-21T14:37:19Z'
    LastModifiedDate: '2025-08-29T20:44:25Z'
  - VulnerabilityID: CVE-2025-8959
    PkgID: github.com/hashicorp/go-getter@v1.7.8
    PkgName: github.com/hashicorp/go-getter
    PkgIdentifier:
      PURL: pkg:golang/github.com/hashicorp/go-getter@v1.7.8
      UID: 85ae4cc9d4706ef4
    InstalledVersion: v1.7.8
    FixedVersion: 1.7.9
    Status: fixed
    Layer:
      Digest: sha256:c9aa02a097bcc2f3b15d59a445e2530cac3267443643501dd6062bd50a4b6afe
      DiffID: sha256:91d87e0c10c73b9d231ea18fd376e9b8495522228fc7c7d38461b41e40aab9e7
    SeveritySource: ghsa
    PrimaryURL: https://avd.aquasec.com/nvd/cve-2025-8959
    DataSource:
      ID: ghsa
      Name: GitHub Security Advisory Go
      URL: https://github.com/advisories?query=type%3Areviewed+ecosystem%3Ago
    Title: 'github.com/hashicorp/go-getter: HashiCorp go-getter Arbitrary File Read'
    Description: HashiCorp's go-getter library subdirectory download feature is vulnerable to symlink attacks leading to unauthorized read access beyond the designated directory boundaries. This vulnerability, identified as CVE-2025-8959, is fixed in go-getter 1.7.9.
    Severity: HIGH
    CweIDs:
    - CWE-59
    VendorSeverity:
      ghsa: 3
      redhat: 3
    CVSS:
      ghsa:
        V3Vector: CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N
        V3Score: 7.5
      redhat:
        V3Vector: CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N
        V3Score: 7.5
    References:
    - https://access.redhat.com/security/cve/CVE-2025-8959
    - https://discuss.hashicorp.com/t/hcsec-2025-23-hashicorp-go-getter-vulnerable-to-arbitrary-read-through-symlink-attack/76242
    - https://github.com/hashicorp/go-getter
    - https://github.com/hashicorp/go-getter/commit/87541b2501c00df5eaedea6acc61a2a4a4efa5b7
    - https://github.com/hashicorp/go-getter/pull/540
    - https://nvd.nist.gov/vuln/detail/CVE-2025-8959
    - https://pkg.go.dev/vuln/GO-2025-3892
    - https://www.cve.org/CVERecord?id=CVE-2025-8959
    PublishedDate: '2025-08-15T21:15:37.347Z'
    LastModifiedDate: '2025-08-18T20:16:28.75Z'
  - VulnerabilityID: CVE-2025-58058
    PkgID: github.com/ulikunitz/xz@v0.5.12
    PkgName: github.com/ulikunitz/xz
    PkgIdentifier:
      PURL: pkg:golang/github.com/ulikunitz/xz@v0.5.12
      UID: c40b9b8b2dd0162b
    InstalledVersion: v0.5.12
    FixedVersion: 0.5.15
    Status: fixed
    Layer:
      Digest: sha256:c9aa02a097bcc2f3b15d59a445e2530cac3267443643501dd6062bd50a4b6afe
      DiffID: sha256:91d87e0c10c73b9d231ea18fd376e9b8495522228fc7c7d38461b41e40aab9e7
    SeveritySource: ghsa
    PrimaryURL: https://avd.aquasec.com/nvd/cve-2025-58058
    DataSource:
      ID: ghsa
      Name: GitHub Security Advisory Go
      URL: https://github.com/advisories?query=type%3Areviewed+ecosystem%3Ago
    Title: 'github.com/ulikunitz/xz: github.com/ulikunitz/xz leaks memory'
    Description: xz is a pure golang package for reading and writing xz-compressed files. Prior to version 0.5.14, it is possible to put data in front of an LZMA-encoded byte stream without detecting the situation while reading the header. This can lead to increased memory consumption because the current implementation allocates the full decoding buffer directly after reading the header. The LZMA header doesn't include a magic number or has a checksum to detect such an issue according to the specification. Note that the code recognizes the issue later while reading the stream, but at this time the memory allocation has already been done. This issue has been patched in version 0.5.14.
    Severity: MEDIUM
    CweIDs:
    - CWE-770
    VendorSeverity:
      ghsa: 2
      redhat: 2
    CVSS:
      ghsa:
        V3Vector: CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L
        V3Score: 5.3
      redhat:
        V3Vector: CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L
        V3Score: 5.3
    References:
    - https://access.redhat.com/security/cve/CVE-2025-58058
    - https://github.com/ulikunitz/xz
    - https://github.com/ulikunitz/xz/commit/88ddf1d0d98d688db65de034f48960b2760d2ae2
    - https://github.com/ulikunitz/xz/security/advisories/GHSA-jc7w-c686-c4v9
    - https://nvd.nist.gov/vuln/detail/CVE-2025-58058
    - https://www.cve.org/CVERecord?id=CVE-2025-58058
    PublishedDate: '2025-08-28T22:15:32.577Z'
    LastModifiedDate: '2025-08-29T16:24:29.73Z'
  - VulnerabilityID: CVE-2025-53547
    PkgID: helm.sh/helm/v3@v3.18.3
    PkgName: helm.sh/helm/v3
    PkgIdentifier:
      PURL: pkg:golang/helm.sh/helm/v3@v3.18.3
      UID: cf2480296004620c
    InstalledVersion: v3.18.3
    FixedVersion: 3.18.4, 3.17.4
    Status: fixed
    Layer:
      Digest: sha256:c9aa02a097bcc2f3b15d59a445e2530cac3267443643501dd6062bd50a4b6afe
      DiffID: sha256:91d87e0c10c73b9d231ea18fd376e9b8495522228fc7c7d38461b41e40aab9e7
    SeveritySource: ghsa
    PrimaryURL: https://avd.aquasec.com/nvd/cve-2025-53547
    DataSource:
      ID: ghsa
      Name: GitHub Security Advisory Go
      URL: https://github.com/advisories?query=type%3Areviewed+ecosystem%3Ago
    Title: 'helm.sh/helm/v3: Helm Chart Code Execution'
    Description: Helm is a package manager for Charts for Kubernetes. Prior to 3.18.4, a specially crafted Chart.yaml file along with a specially linked Chart.lock file can lead to local code execution when dependencies are updated. Fields in a Chart.yaml file, that are carried over to a Chart.lock file when dependencies are updated and this file is written, can be crafted in a way that can cause execution if that same content were in a file that is executed (e.g., a bash.rc file or shell script). If the Chart.lock file is symlinked to one of these files updating dependencies will write the lock file content to the symlinked file. This can lead to unwanted execution. Helm warns of the symlinked file but did not stop execution due to symlinking. This issue has been resolved in Helm v3.18.4.
    Severity: HIGH
    CweIDs:
    - CWE-94
    VendorSeverity:
      bitnami: 3
      cbl-mariner: 3
      ghsa: 3
      nvd: 3
      redhat: 3
    CVSS:
      bitnami:
        V3Vector: CVSS:3.1/AV:L/AC:L/PR:N/UI:R/S:C/C:H/I:H/A:H
        V3Score: 8.6
      ghsa:
        V3Vector: CVSS:3.1/AV:L/AC:L/PR:N/UI:R/S:C/C:L/I:H/A:H
        V3Score: 8.5
      nvd:
        V3Vector: CVSS:3.1/AV:L/AC:L/PR:N/UI:R/S:C/C:H/I:H/A:H
        V3Score: 8.6
      redhat:
        V3Vector: CVSS:3.1/AV:L/AC:L/PR:N/UI:R/S:C/C:L/I:H/A:H
        V3Score: 8.5
    References:
    - https://access.redhat.com/security/cve/CVE-2025-53547
    - https://github.com/helm/helm
    - https://github.com/helm/helm/commit/4b8e61093d8f579f1165cdc6bd4b43fa5455f571
    - https://github.com/helm/helm/security/advisories/GHSA-557j-xg8c-q2mm
    - https://news.ycombinator.com/item?id=44506696
    - https://nvd.nist.gov/vuln/detail/CVE-2025-53547
    - https://www.cve.org/CVERecord?id=CVE-2025-53547
    PublishedDate: '2025-07-08T22:15:27.897Z'
    LastModifiedDate: '2025-09-03T16:26:24.77Z'
  - VulnerabilityID: CVE-2025-55198
    PkgID: helm.sh/helm/v3@v3.18.3
    PkgName: helm.sh/helm/v3
    PkgIdentifier:
      PURL: pkg:golang/helm.sh/helm/v3@v3.18.3
      UID: cf2480296004620c
    InstalledVersion: v3.18.3
    FixedVersion: 3.18.5
    Status: fixed
    Layer:
      Digest: sha256:c9aa02a097bcc2f3b15d59a445e2530cac3267443643501dd6062bd50a4b6afe
      DiffID: sha256:91d87e0c10c73b9d231ea18fd376e9b8495522228fc7c7d38461b41e40aab9e7
    SeveritySource: ghsa
    PrimaryURL: https://avd.aquasec.com/nvd/cve-2025-55198
    DataSource:
      ID: ghsa
      Name: GitHub Security Advisory Go
      URL: https://github.com/advisories?query=type%3Areviewed+ecosystem%3Ago
    Title: 'helm.sh/helm/v3: Helm YAML Parsing Panic Vulnerability'
    Description: Helm is a package manager for Charts for Kubernetes. Prior to version 3.18.5, when parsing Chart.yaml and index.yaml files, an improper validation of type error can lead to a panic. This issue has been resolved in Helm 3.18.5. A workaround involves ensuring YAML files are formatted as Helm expects prior to processing them with Helm.
    Severity: MEDIUM
    CweIDs:
    - CWE-908
    VendorSeverity:
      bitnami: 2
      ghsa: 2
      redhat: 2
    CVSS:
      bitnami:
        V3Vector: CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:N/A:H
        V3Score: 6.5
      ghsa:
        V3Vector: CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:N/A:H
        V3Score: 6.5
      redhat:
        V3Vector: CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:N/A:H
        V3Score: 6.5
    References:
    - https://access.redhat.com/security/cve/CVE-2025-55198
    - https://github.com/helm/helm
    - https://github.com/helm/helm/commit/ec5f59e2db56533d042a124f5bae54dd87b558e6
    - https://github.com/helm/helm/security/advisories/GHSA-f9f8-9pmf-xv68
    - https://nvd.nist.gov/vuln/detail/CVE-2025-55198
    - https://www.cve.org/CVERecord?id=CVE-2025-55198
    PublishedDate: '2025-08-14T00:15:26.557Z'
    LastModifiedDate: '2025-08-21T21:28:21.383Z'
  - VulnerabilityID: CVE-2025-55199
    PkgID: helm.sh/helm/v3@v3.18.3
    PkgName: helm.sh/helm/v3
    PkgIdentifier:
      PURL: pkg:golang/helm.sh/helm/v3@v3.18.3
      UID: cf2480296004620c
    InstalledVersion: v3.18.3
    FixedVersion: 3.18.5
    Status: fixed
    Layer:
      Digest: sha256:c9aa02a097bcc2f3b15d59a445e2530cac3267443643501dd6062bd50a4b6afe
      DiffID: sha256:91d87e0c10c73b9d231ea18fd376e9b8495522228fc7c7d38461b41e40aab9e7
    SeveritySource: ghsa
    PrimaryURL: https://avd.aquasec.com/nvd/cve-2025-55199
    DataSource:
      ID: ghsa
      Name: GitHub Security Advisory Go
      URL: https://github.com/advisories?query=type%3Areviewed+ecosystem%3Ago
    Title: 'helm.sh/helm/v3: Helm Chart JSON Schema Denial of Service'
    Description: Helm is a package manager for Charts for Kubernetes. Prior to version 3.18.5, it is possible to craft a JSON Schema file in a manner which could cause Helm to use all available memory and have an out of memory (OOM) termination. This issue has been resolved in Helm 3.18.5. A workaround involves ensuring all Helm charts that are being loaded into Helm do not have any reference of $ref pointing to /dev/zero.
    Severity: MEDIUM
    CweIDs:
    - CWE-770
    VendorSeverity:
      bitnami: 2
      ghsa: 2
      redhat: 2
    CVSS:
      bitnami:
        V3Vector: CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:N/A:H
        V3Score: 6.5
      ghsa:
        V3Vector: CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:N/A:H
        V3Score: 6.5
      redhat:
        V3Vector: CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:N/A:H
        V3Score: 6.5
    References:
    - https://access.redhat.com/security/cve/CVE-2025-55199
    - https://github.com/helm/helm
    - https://github.com/helm/helm/commit/b78692c18f0fb38fe5ba4571a674de067a4c53a5
    - https://github.com/helm/helm/security/advisories/GHSA-9h84-qmv7-982p
    - https://nvd.nist.gov/vuln/detail/CVE-2025-55199
    - https://www.cve.org/CVERecord?id=CVE-2025-55199
    PublishedDate: '2025-08-14T00:15:27.96Z'
    LastModifiedDate: '2025-08-21T21:25:20.793Z'
  - VulnerabilityID: CVE-2025-47907
    PkgID: stdlib@v1.24.4
    PkgName: stdlib
    PkgIdentifier:
      PURL: pkg:golang/stdlib@v1.24.4
      UID: 2bd9acee40f6eed
    InstalledVersion: v1.24.4
    FixedVersion: 1.23.12, 1.24.6
    Status: fixed
    Layer:
      Digest: sha256:c9aa02a097bcc2f3b15d59a445e2530cac3267443643501dd6062bd50a4b6afe
      DiffID: sha256:91d87e0c10c73b9d231ea18fd376e9b8495522228fc7c7d38461b41e40aab9e7
    PrimaryURL: https://avd.aquasec.com/nvd/cve-2025-47907
    DataSource:
      ID: govulndb
      Name: The Go Vulnerability Database
      URL: https://pkg.go.dev/vuln/
    Title: 'database/sql: Postgres Scan Race Condition'
    Description: Cancelling a query (e.g. by cancelling the context passed to one of the query methods) during a call to the Scan method of the returned Rows can result in unexpected results if other queries are being made in parallel. This can result in a race condition that may overwrite the expected results with those of another query, causing the call to Scan to return either unexpected results from the other query or an error.
    Severity: HIGH
    VendorSeverity:
      amazon: 3
      azure: 3
      bitnami: 3
      cbl-mariner: 3
      redhat: 2
    CVSS:
      bitnami:
        V3Vector: CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:L/A:L
        V3Score: 7
      redhat:
        V3Vector: CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:L/A:L
        V3Score: 7
    References:
    - https://access.redhat.com/security/cve/CVE-2025-47907
    - https://go.dev/cl/693735
    - https://go.dev/issue/74831
    - https://groups.google.com/g/golang-announce/c/x5MKroML2yM
    - https://nvd.nist.gov/vuln/detail/CVE-2025-47907
    - https://pkg.go.dev/vuln/GO-2025-3849
    - https://www.cve.org/CVERecord?id=CVE-2025-47907
    PublishedDate: '2025-08-07T16:15:30.357Z'
    LastModifiedDate: '2025-08-07T21:26:37.453Z'
- Target: usr/bin/trivy_cve_query
  Class: lang-pkgs
  Type: gobinary
  Vulnerabilities:
  - VulnerabilityID: CVE-2025-47907
    PkgID: stdlib@v1.24.5
    PkgName: stdlib
    PkgIdentifier:
      PURL: pkg:golang/stdlib@v1.24.5
      UID: 7927e62558d558ff
    InstalledVersion: v1.24.5
    FixedVersion: 1.23.12, 1.24.6
    Status: fixed
    Layer:
      Digest: sha256:c9aa02a097bcc2f3b15d59a445e2530cac3267443643501dd6062bd50a4b6afe
      DiffID: sha256:91d87e0c10c73b9d231ea18fd376e9b8495522228fc7c7d38461b41e40aab9e7
    PrimaryURL: https://avd.aquasec.com/nvd/cve-2025-47907
    DataSource:
      ID: govulndb
      Name: The Go Vulnerability Database
      URL: https://pkg.go.dev/vuln/
    Title: 'database/sql: Postgres Scan Race Condition'
    Description: Cancelling a query (e.g. by cancelling the context passed to one of the query methods) during a call to the Scan method of the returned Rows can result in unexpected results if other queries are being made in parallel. This can result in a race condition that may overwrite the expected results with those of another query, causing the call to Scan to return either unexpected results from the other query or an error.
    Severity: HIGH
    VendorSeverity:
      amazon: 3
      azure: 3
      bitnami: 3
      cbl-mariner: 3
      redhat: 2
    CVSS:
      bitnami:
        V3Vector: CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:L/A:L
        V3Score: 7
      redhat:
        V3Vector: CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:L/A:L
        V3Score: 7
    References:
    - https://access.redhat.com/security/cve/CVE-2025-47907
    - https://go.dev/cl/693735
    - https://go.dev/issue/74831
    - https://groups.google.com/g/golang-announce/c/x5MKroML2yM
    - https://nvd.nist.gov/vuln/detail/CVE-2025-47907
    - https://pkg.go.dev/vuln/GO-2025-3849
    - https://www.cve.org/CVERecord?id=CVE-2025-47907
    PublishedDate: '2025-08-07T16:15:30.357Z'
    LastModifiedDate: '2025-08-07T21:26:37.453Z'
